package co.chainring.contracts.generated;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class Exchange extends Contract {
    public static final String BINARY = "60a06040523060805234801561001457600080fd5b50608051612f7761003e6000396000818161151b0152818161154401526116850152612f776000f3fe60806040526004361061012e5760003560e01c80635a91f743116100ab5780638dc45d9a1161006f5780638dc45d9a14610398578063a07581c6146103b8578063ad3cb1cc146103d8578063c23f001f14610416578063d1e32f671461044b578063f2fde38b1461046057600080fd5b80635a91f743146102c657806365e17c9d146102e6578063715018a61461031e57806384b0196e146103335780638da5cb5b1461035b57600080fd5b8063485cc955116100f2578063485cc955146102485780634a34d434146102685780634b023cf81461027e5780634f1ef2861461029e57806352d1902d146102b157600080fd5b80630d8e6e2c146101a257806324a9b806146101c357806330176c86146101e55780633644e5151461020557806347e7ef241461022857600080fd5b3661019d57336000908152602081815260408083208380529091528120805434929061015b90849061220e565b9091555050604080516000815234602082015233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2005b600080fd5b3480156101ae57600080fd5b50604051600181526020015b60405180910390f35b3480156101cf57600080fd5b506101e36101de366004612221565b610480565b005b3480156101f157600080fd5b506101e3610200366004612221565b6108ef565b34801561021157600080fd5b5061021a610e91565b6040519081526020016101ba565b34801561023457600080fd5b506101e36102433660046122ae565b610ea0565b34801561025457600080fd5b506101e36102633660046122d8565b610f99565b34801561027457600080fd5b5061021a60035481565b34801561028a57600080fd5b506101e361029936600461230b565b61112d565b6101e36102ac366004612469565b6111a3565b3480156102bd57600080fd5b5061021a6111c2565b3480156102d257600080fd5b506101e36102e136600461230b565b6111df565b3480156102f257600080fd5b50600254610306906001600160a01b031681565b6040516001600160a01b0390911681526020016101ba565b34801561032a57600080fd5b506101e3611255565b34801561033f57600080fd5b50610348611269565b6040516101ba9796959493929190612506565b34801561036757600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610306565b3480156103a457600080fd5b50600154610306906001600160a01b031681565b3480156103c457600080fd5b506101e36103d336600461259f565b611315565b3480156103e457600080fd5b50610409604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101ba9190612601565b34801561042257600080fd5b5061021a6104313660046122d8565b600060208181529281526040808220909352908152205481565b34801561045757600080fd5b506101e3611411565b34801561046c57600080fd5b506101e361047b36600461230b565b611442565b6001546001600160a01b031633146104b35760405162461bcd60e51b81526004016104aa90612614565b60405180910390fd5b600354156105115760405162461bcd60e51b815260206004820152602560248201527f426174636820696e2070726f67726573732c207375626d6974206f7220726f6c6044820152646c6261636b60d81b60648201526084016104aa565b6001600061052183850185612929565b6020810151518151519192501461058a5760405162461bcd60e51b815260206004820152602760248201527f496e76616c6964206164647265737320616e64207472616465206c69737473206044820152666c656e6774687360c81b60648201526084016104aa565b60005b8160400151518163ffffffff1610156108c557600082604001518263ffffffff16815181106105be576105be612a37565b6020026020010151606001519050600083604001518363ffffffff16815181106105ea576105ea612a37565b602002602001015160000151905060005b84604001518463ffffffff168151811061061757610617612a37565b602002602001015160200151518163ffffffff16101561069b5784604001518463ffffffff168151811061064d5761064d612a37565b6020026020010151602001518163ffffffff168151811061067057610670612a37565b602002602001015160200151836106879190612a4d565b92508061069381612a75565b9150506105fb565b5060005b84604001518463ffffffff16815181106106bb576106bb612a37565b602002602001015160400151518163ffffffff16101561085c57600085604001518563ffffffff16815181106106f3576106f3612a37565b6020026020010151604001518263ffffffff168151811061071657610716612a37565b602002602001015160200151905080846107309190612a98565b9350600086604001518663ffffffff168151811061075057610750612a37565b6020026020010151604001518363ffffffff168151811061077357610773612a37565b60200260200101516000015161ffff169050600087600001518263ffffffff16815181106107a3576107a3612a37565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928a168252919093529091205490915083111561084657600098507f5c35030a0e818fc3bc61d5448a0baedb9bf6b1590fb888a6c25f4b814be34bbf8189602001518463ffffffff168151811061082057610820612a37565b602002602001015160000151600160405161083d93929190612b33565b60405180910390a15b505050808061085490612a75565b91505061069f565b5081156108b05783604001518363ffffffff168151811061087f5761087f612a37565b6020908102919091010151516040516337f855c760e01b81526001600160a01b0390911660048201526024016104aa565b505080806108bd90612a75565b91505061058d565b5081156108e95783836040516108dc929190612b6e565b6040519081900390206003555b50505050565b6001546001600160a01b031633146109195760405162461bcd60e51b81526004016104aa90612614565b60035460000361095f5760405162461bcd60e51b8152602060048201526011602482015270139bc818985d18da081c1c995c185c9959607a1b60448201526064016104aa565b818160405161096f929190612b6e565b6040518091039020600354146109d25760405162461bcd60e51b815260206004820152602260248201527f4861736820646f6573206e6f74206d61746368207072657061726564206261746044820152610c6d60f31b60648201526084016104aa565b60006109e082840184612929565b905060005b8160400151518163ffffffff161015610dda57600082604001518263ffffffff1681518110610a1657610a16612a37565b602002602001015160000151905060005b83604001518363ffffffff1681518110610a4357610a43612a37565b602002602001015160200151518163ffffffff161015610b7157600084604001518463ffffffff1681518110610a7b57610a7b612a37565b6020026020010151602001518263ffffffff1681518110610a9e57610a9e612a37565b60200260200101516020015190506000856000015186604001518663ffffffff1681518110610acf57610acf612a37565b6020026020010151602001518463ffffffff1681518110610af257610af2612a37565b60200260200101516000015161ffff1681518110610b1257610b12612a37565b6020908102919091018101516001600160a01b03808216600090815280845260408082209289168252919093528220805491935084929091610b5590849061220e565b9250508190555050508080610b6990612a75565b915050610a27565b5060005b83604001518363ffffffff1681518110610b9157610b91612a37565b602002602001015160400151518163ffffffff161015610d2e57600084604001518463ffffffff1681518110610bc957610bc9612a37565b6020026020010151604001518263ffffffff1681518110610bec57610bec612a37565b60200260200101516020015190506000856000015186604001518663ffffffff1681518110610c1d57610c1d612a37565b6020026020010151604001518463ffffffff1681518110610c4057610c40612a37565b60200260200101516000015161ffff1681518110610c6057610c60612a37565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928916825291909352909120549091508211610cda576001600160a01b0380821660009081526020818152604080832093881683529290529081208054849290610ccf908490612b7e565b90915550610d199050565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b60448201526064016104aa565b50508080610d2690612a75565b915050610b75565b5082604001518263ffffffff1681518110610d4b57610d4b612a37565b602002602001015160600151600014610dc75782604001518263ffffffff1681518110610d7a57610d7a612a37565b602090810291909101810151606001516002546001600160a01b03908116600090815280845260408082209286168252919093528220805491929091610dc190849061220e565b90915550505b5080610dd281612a75565b9150506109e5565b5060005b8160200151518163ffffffff161015610e86577f8371f930fec32c9b3def9889038e3a93c3df73bc83aa9e6c01c806a70b2cce1782600001518263ffffffff1681518110610e2e57610e2e612a37565b602002602001015183602001518363ffffffff1681518110610e5257610e52612a37565b602002602001015160000151604051610e6c929190612b91565b60405180910390a180610e7e81612a75565b915050610dde565b505060006003555050565b6000610e9b611480565b905090565b6040516323b872dd60e01b81523360048201523060248201526044810182905282906001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f199190612bb5565b50336000908152602081815260408083206001600160a01b038716845290915281208054849290610f4b90849061220e565b9091555050604080516001600160a01b03851681526020810184905233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015610fde5750825b90506000826001600160401b03166001148015610ffa5750303b155b905081158015611008575080155b156110265760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561105057845460ff60401b1916600160401b1785555b6110593361148a565b61106161149b565b6110ae6040518060400160405280600e81526020016d436861696e52696e67204c61627360901b81525060405180604001604052806005815260200164302e302e3160d81b8152506114a3565b600180546001600160a01b03808a166001600160a01b0319928316179092556002805492891692909116919091179055831561112457845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6111356114b5565b6001600160a01b0381166111815760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b60448201526064016104aa565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6111ab611510565b6111b4826115b5565b6111be82826115bd565b5050565b60006111cc61167a565b50600080516020612f2283398151915290565b6111e76114b5565b6001600160a01b0381166112335760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b60448201526064016104aa565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61125d6114b5565b61126760006116c3565b565b60006060808280808381600080516020612f02833981519152805490915015801561129657506001810154155b6112da5760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b60448201526064016104aa565b6112e2611734565b6112ea6117f7565b60408051600080825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b6001546001600160a01b0316331461133f5760405162461bcd60e51b81526004016104aa90612614565b6003541561138f5760405162461bcd60e51b815260206004820152601b60248201527f536574746c656d656e7420626174636820696e2070726f63657373000000000060448201526064016104aa565b60005b8181101561140c573660008484848181106113af576113af612a37565b90506020028101906113c19190612bd7565b909250905060006113d483830184612c3b565b90506113df81611836565b156114015760208082015180519181015160409091015161140192919061194c565b505050600101611392565b505050565b6001546001600160a01b0316331461143b5760405162461bcd60e51b81526004016104aa90612614565b6000600355565b61144a6114b5565b6001600160a01b03811661147457604051631e4fbdf760e01b8152600060048201526024016104aa565b61147d816116c3565b50565b6000610e9b611aae565b611492611b22565b61147d81611b6b565b611267611b22565b6114ab611b22565b6111be8282611b73565b336114e77f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146112675760405163118cdaa760e01b81523360048201526024016104aa565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061159757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661158b600080516020612f22833981519152546001600160a01b031690565b6001600160a01b031614155b156112675760405163703e46dd60e11b815260040160405180910390fd5b61147d6114b5565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611617575060408051601f3d908101601f1916820190925261161491810190612d08565b60015b61163f57604051634c9c8ce360e01b81526001600160a01b03831660048201526024016104aa565b600080516020612f22833981519152811461167057604051632a87526960e21b8152600481018290526024016104aa565b61140c8383611bd4565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112675760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1028054606091600080516020612f028339815191529161177390612d21565b80601f016020809104026020016040519081016040528092919081815260200182805461179f90612d21565b80156117ec5780601f106117c1576101008083540402835291602001916117ec565b820191906000526020600020905b8154815290600101906020018083116117cf57829003601f168201915b505050505091505090565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1038054606091600080516020612f028339815191529161177390612d21565b6000806118c8604051806080016040528060428152602001612ec0604291398051602091820120858201518051818401516040808401516060948501518251978801969096526001600160a01b039384169187019190915291169184019190915260808301526001600160401b031660a082015260c00160405160208183030381529060405280519060200120611c2a565b905060006118da828560400151611c5d565b90508360200151600001516001600160a01b0316816001600160a01b0316146119425783516040517f5fa556928dfa5f61a1956fbd65ad6d6c2cce11e24da18840de066ecaddeac9aa9161193091600090612d5b565b60405180910390a15060009392505050565b5060019392505050565b6001600160a01b038084166000908152602081815260408083209386168352929052908120549082900361197e578091505b6000611993858561198e86612d78565b611c87565b61199c90612d78565b90506001600160a01b0384166119e8576040516001600160a01b0386169082156108fc029083906000818181858888f193505050501580156119e2573d6000803e3d6000fd5b50611a61565b60405163a9059cbb60e01b81526001600160a01b0386811660048301526024820183905285919082169063a9059cbb906044016020604051808303816000875af1158015611a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5e9190612bb5565b50505b604080516001600160a01b038681168252602082018490528716917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a25050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611ad9611df6565b611ae1611e60565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661126757604051631afcd79f60e31b815260040160405180910390fd5b61144a611b22565b611b7b611b22565b600080516020612f028339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d102611bb58482612de4565b5060038101611bc48382612de4565b5060008082556001909101555050565b611bdd82611ea4565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611c225761140c8282611f09565b6111be611f7f565b6000611c57611c37611480565b8360405161190160f01b8152600281019290925260228201526042902090565b92915050565b600080600080611c6d8686611f9e565b925092509250611c7d8282611feb565b5090949350505050565b600080821215611dac576001600160a01b0380851660009081526020818152604080832093871683529290529081205490611cc184612d78565b905081811115611d6757604080516001600160a01b03878116825260208201849052918101849052908716907fd03c7671e7c0af50b023090b014797cc5cb6464510f9c483945ab64f6f63cc079060600160405180910390a26001600160a01b0380871660009081526020818152604080832093891683529290529081208054849290611d4f908490612b7e565b90915550611d5e905082612d78565b92505050611def565b6001600160a01b0380871660009081526020818152604080832093891683529290529081208054839290611d9c908490612b7e565b90915550849350611def92505050565b6001600160a01b0380851660009081526020818152604080832093871683529290529081208054849290611de190849061220e565b90915550829150611def9050565b9392505050565b6000600080516020612f0283398151915281611e10611734565b805190915015611e2857805160209091012092915050565b81548015611e37579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b6000600080516020612f0283398151915281611e7a6117f7565b805190915015611e9257805160209091012092915050565b60018201548015611e37579392505050565b806001600160a01b03163b600003611eda57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016104aa565b600080516020612f2283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611f269190612ea3565b600060405180830381855af49150503d8060008114611f61576040519150601f19603f3d011682016040523d82523d6000602084013e611f66565b606091505b5091509150611f768583836120a4565b95945050505050565b34156112675760405163b398979f60e01b815260040160405180910390fd5b60008060008351604103611fd85760208401516040850151606086015160001a611fca88828585612100565b955095509550505050611fe4565b50508151600091506002905b9250925092565b6000826003811115611fff57611fff612afb565b03612008575050565b600182600381111561201c5761201c612afb565b0361203a5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561204e5761204e612afb565b0361206f5760405163fce698f760e01b8152600481018290526024016104aa565b600382600381111561208357612083612afb565b036111be576040516335e2f38360e21b8152600481018290526024016104aa565b6060826120b9576120b4826121cf565b611def565b81511580156120d057506001600160a01b0384163b155b156120f957604051639996b31560e01b81526001600160a01b03851660048201526024016104aa565b5080611def565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561213b57506000915060039050826121c5565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561218f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166121bb575060009250600191508290506121c5565b9250600091508190505b9450945094915050565b8051156121df5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115611c5757611c576121f8565b6000806020838503121561223457600080fd5b82356001600160401b038082111561224b57600080fd5b818501915085601f83011261225f57600080fd5b81358181111561226e57600080fd5b86602082850101111561228057600080fd5b60209290920196919550909350505050565b80356001600160a01b03811681146122a957600080fd5b919050565b600080604083850312156122c157600080fd5b6122ca83612292565b946020939093013593505050565b600080604083850312156122eb57600080fd5b6122f483612292565b915061230260208401612292565b90509250929050565b60006020828403121561231d57600080fd5b611def82612292565b634e487b7160e01b600052604160045260246000fd5b604051602081016001600160401b038111828210171561235e5761235e612326565b60405290565b604080519081016001600160401b038111828210171561235e5761235e612326565b604051608081016001600160401b038111828210171561235e5761235e612326565b604051606081016001600160401b038111828210171561235e5761235e612326565b604051601f8201601f191681016001600160401b03811182821017156123f2576123f2612326565b604052919050565b600082601f83011261240b57600080fd5b81356001600160401b0381111561242457612424612326565b612437601f8201601f19166020016123ca565b81815284602083860101111561244c57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561247c57600080fd5b61248583612292565b915060208301356001600160401b038111156124a057600080fd5b6124ac858286016123fa565b9150509250929050565b60005b838110156124d15781810151838201526020016124b9565b50506000910152565b600081518084526124f28160208601602086016124b6565b601f01601f19169290920160200192915050565b60ff60f81b881681526000602060e0602084015261252760e084018a6124da565b8381036040850152612539818a6124da565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b8181101561258d57835183529284019291840191600101612571565b50909c9b505050505050505050505050565b600080602083850312156125b257600080fd5b82356001600160401b03808211156125c957600080fd5b818501915085601f8301126125dd57600080fd5b8135818111156125ec57600080fd5b8660208260051b850101111561228057600080fd5b602081526000611def60208301846124da565b6020808252601b908201527f53656e646572206973206e6f7420746865207375626d69747465720000000000604082015260600190565b60006001600160401b0382111561266457612664612326565b5060051b60200190565b600082601f83011261267f57600080fd5b8135602061269461268f8361264b565b6123ca565b828152600592831b85018201928282019190878511156126b357600080fd5b8387015b858110156127835780356001600160401b03808211156126d75760008081fd5b90890190818b03601f19018713156126ef5760008081fd5b6126f761233c565b87830135828111156127095760008081fd5b8084019350508b603f84011261272157600091508182fd5b878301359150604061273561268f8461264b565b83815292861b8401810192898101908e8511156127525760008081fd5b948201945b848610156127705785358252948a0194908a0190612757565b83525050865250509284019284016126b7565b5090979650505050505050565b600082601f8301126127a157600080fd5b813560206127b161268f8361264b565b82815260069290921b840181019181810190868411156127d057600080fd5b8286015b8481101561282057604081890312156127ed5760008081fd5b6127f5612364565b813561ffff811681146128085760008081fd5b815281850135858201528352918301916040016127d4565b509695505050505050565b600082601f83011261283c57600080fd5b8135602061284c61268f8361264b565b82815260059290921b8401810191818101908684111561286b57600080fd5b8286015b848110156128205780356001600160401b038082111561288f5760008081fd5b908801906080828b03601f19018113156128a95760008081fd5b6128b1612386565b6128bc888501612292565b8152604080850135848111156128d25760008081fd5b6128e08e8b83890101612790565b8a84015250606080860135858111156128f95760008081fd5b6129078f8c838a0101612790565b928401929092529490920135938101939093525050835291830191830161286f565b6000602080838503121561293c57600080fd5b82356001600160401b038082111561295357600080fd5b908401906060828703121561296757600080fd5b61296f6123a8565b82358281111561297e57600080fd5b8301601f8101881361298f57600080fd5b803561299d61268f8261264b565b81815260059190911b8201860190868101908a8311156129bc57600080fd5b928701925b828410156129e1576129d284612292565b825292870192908701906129c1565b845250505082840135828111156129f757600080fd5b612a038882860161266e565b85830152506040830135935081841115612a1c57600080fd5b612a288785850161282b565b60408201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b8082018281126000831280158216821582161715612a6d57612a6d6121f8565b505092915050565b600063ffffffff808316818103612a8e57612a8e6121f8565b6001019392505050565b8181036000831280158383131683831282161715612ab857612ab86121f8565b5092915050565b60008151808452602080850194506020840160005b83811015612af057815187529582019590820190600101612ad4565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b60028110612b2f57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b0384168152606060208201819052600090612b5790830185612abf565b9050612b666040830184612b11565b949350505050565b8183823760009101908152919050565b81810381811115611c5757611c576121f8565b6001600160a01b0383168152604060208201819052600090612b6690830184612abf565b600060208284031215612bc757600080fd5b81518015158114611def57600080fd5b6000808335601e19843603018112612bee57600080fd5b8301803591506001600160401b03821115612c0857600080fd5b602001915036819003821315612c1d57600080fd5b9250929050565b80356001600160401b03811681146122a957600080fd5b600060208284031215612c4d57600080fd5b81356001600160401b0380821115612c6457600080fd5b9083019081850360c0811215612c7957600080fd5b612c816123a8565b612c8a84612c24565b81526080601f1983011215612c9e57600080fd5b612ca6612386565b9150612cb460208501612292565b8252612cc260408501612292565b602083015260608401356040830152612cdd60808501612c24565b606083015281602082015260a0840135915082821115612cfc57600080fd5b612a28878386016123fa565b600060208284031215612d1a57600080fd5b5051919050565b600181811c90821680612d3557607f821691505b602082108103612d5557634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160401b038316815260408101611def6020830184612b11565b6000600160ff1b8201612d8d57612d8d6121f8565b5060000390565b601f82111561140c576000816000526020600020601f850160051c81016020861015612dbd5750805b601f850160051c820191505b81811015612ddc57828155600101612dc9565b505050505050565b81516001600160401b03811115612dfd57612dfd612326565b612e1181612e0b8454612d21565b84612d94565b602080601f831160018114612e465760008415612e2e5750858301515b600019600386901b1c1916600185901b178555612ddc565b600085815260208120601f198616915b82811015612e7557888601518255948401946001909101908401612e56565b5085821015612e935787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251612eb58184602087016124b6565b919091019291505056fe576974686472617728616464726573732073656e6465722c6164647265737320746f6b656e2c75696e7432353620616d6f756e742c75696e743634206e6f6e636529a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220e5810b28e9061ce30330b947bba0d97bb8fd37f44dfa8b0e015457f4f6a9007864736f6c63430008180033";

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_UPGRADE_INTERFACE_VERSION = "UPGRADE_INTERFACE_VERSION";

    public static final String FUNC_BALANCES = "balances";

    public static final String FUNC_BATCHHASH = "batchHash";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FEEACCOUNT = "feeAccount";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PREPARESETTLEMENTBATCH = "prepareSettlementBatch";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROLLBACKBATCH = "rollbackBatch";

    public static final String FUNC_SETFEEACCOUNT = "setFeeAccount";

    public static final String FUNC_SETSUBMITTER = "setSubmitter";

    public static final String FUNC_SUBMITSETTLEMENTBATCH = "submitSettlementBatch";

    public static final String FUNC_SUBMITWITHDRAWALS = "submitWithdrawals";

    public static final String FUNC_SUBMITTER = "submitter";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event AMOUNTADJUSTED_EVENT = new Event("AmountAdjusted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETTLEMENTCOMPLETED_EVENT = new Event("SettlementCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event SETTLEMENTFAILED_EVENT = new Event("SettlementFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event WITHDRAWAL_EVENT = new Event("Withdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALFAILED_EVENT = new Event("WithdrawalFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Uint8>() {}));
    ;

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> UPGRADE_INTERFACE_VERSION() {
        final Function function = new Function(FUNC_UPGRADE_INTERFACE_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balances(String param0, String param1) {
        final Function function = new Function(FUNC_BALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> batchHash() {
        final Function function = new Function(FUNC_BATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(String _token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain() {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> feeAccount() {
        final Function function = new Function(FUNC_FEEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getVersion() {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _submitter, String _feeAccount) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter), 
                new org.web3j.abi.datatypes.Address(160, _feeAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_PREPARESETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rollbackBatch() {
        final Function function = new Function(
                FUNC_ROLLBACKBATCH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeAccount(String _feeAccount) {
        final Function function = new Function(
                FUNC_SETFEEACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _feeAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSubmitter(String _submitter) {
        final Function function = new Function(
                FUNC_SETSUBMITTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_SUBMITSETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitWithdrawals(List<byte[]> withdrawals) {
        final Function function = new Function(
                FUNC_SUBMITWITHDRAWALS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(withdrawals, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> submitter() {
        final Function function = new Function(FUNC_SUBMITTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public static List<AmountAdjustedEventResponse> getAmountAdjustedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AMOUNTADJUSTED_EVENT, transactionReceipt);
        ArrayList<AmountAdjustedEventResponse> responses = new ArrayList<AmountAdjustedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AmountAdjustedEventResponse typedResponse = new AmountAdjustedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.requested = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.actual = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AmountAdjustedEventResponse getAmountAdjustedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AMOUNTADJUSTED_EVENT, log);
        AmountAdjustedEventResponse typedResponse = new AmountAdjustedEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.requested = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.actual = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<AmountAdjustedEventResponse> amountAdjustedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAmountAdjustedEventFromLog(log));
    }

    public Flowable<AmountAdjustedEventResponse> amountAdjustedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AMOUNTADJUSTED_EVENT));
        return amountAdjustedEventFlowable(filter);
    }

    public static List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DepositEventResponse getDepositEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEPOSIT_EVENT, log);
        DepositEventResponse typedResponse = new DepositEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDepositEventFromLog(log));
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<SettlementCompletedEventResponse> getSettlementCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, transactionReceipt);
        ArrayList<SettlementCompletedEventResponse> responses = new ArrayList<SettlementCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementCompletedEventResponse getSettlementCompletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, log);
        SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementCompletedEventFromLog(log));
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTCOMPLETED_EVENT));
        return settlementCompletedEventFlowable(filter);
    }

    public static List<SettlementFailedEventResponse> getSettlementFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, transactionReceipt);
        ArrayList<SettlementFailedEventResponse> responses = new ArrayList<SettlementFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementFailedEventResponse getSettlementFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, log);
        SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementFailedEventFromLog(log));
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTFAILED_EVENT));
        return settlementFailedEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalEventResponse getWithdrawalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, log);
        WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalEventFromLog(log));
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    public static List<WithdrawalFailedEventResponse> getWithdrawalFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALFAILED_EVENT, transactionReceipt);
        ArrayList<WithdrawalFailedEventResponse> responses = new ArrayList<WithdrawalFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalFailedEventResponse typedResponse = new WithdrawalFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalFailedEventResponse getWithdrawalFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALFAILED_EVENT, log);
        WithdrawalFailedEventResponse typedResponse = new WithdrawalFailedEventResponse();
        typedResponse.log = log;
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalFailedEventResponse> withdrawalFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalFailedEventFromLog(log));
    }

    public Flowable<WithdrawalFailedEventResponse> withdrawalFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALFAILED_EVENT));
        return withdrawalFailedEventFlowable(filter);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AmountAdjustedEventResponse extends BaseEventResponse {
        public String sender;

        public String token;

        public BigInteger requested;

        public BigInteger actual;
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String from;

        public String token;

        public BigInteger amount;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SettlementCompletedEventResponse extends BaseEventResponse {
        public String _address;

        public List<byte[]> tradeHashes;
    }

    public static class SettlementFailedEventResponse extends BaseEventResponse {
        public String _address;

        public List<byte[]> tradeHashes;

        public BigInteger errorCode;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public String to;

        public String token;

        public BigInteger amount;
    }

    public static class WithdrawalFailedEventResponse extends BaseEventResponse {
        public BigInteger sequence;

        public BigInteger errorCode;
    }
}
