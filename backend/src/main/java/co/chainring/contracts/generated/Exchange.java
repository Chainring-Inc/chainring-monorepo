package co.chainring.contracts.generated;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class Exchange extends Contract {
    public static final String BINARY = "60a06040523060805234801561001457600080fd5b5060805161310461003e6000396000818161163e0152818161166701526117ad01526131046000f3fe6080604052600436106101445760003560e01c806365e17c9d116100b6578063ad3cb1cc1161006f578063ad3cb1cc146103ee578063c23f001f1461042c578063d1e32f6714610461578063e791cb2414610476578063ed53f22a1461048c578063f2fde38b146104a257600080fd5b806365e17c9d146102fc578063715018a61461033457806384b0196e146103495780638da5cb5b146103715780638dc45d9a146103ae578063a07581c6146103ce57600080fd5b8063485cc95511610108578063485cc9551461025e5780634a34d4341461027e5780634b023cf8146102945780634f1ef286146102b457806352d1902d146102c75780635a91f743146102dc57600080fd5b80630d8e6e2c146101b857806324a9b806146101d957806330176c86146101fb5780633644e5151461021b57806347e7ef241461023e57600080fd5b366101b357336000908152602081815260408083208380529091528120805434929061017190849061236b565b9091555050604080516000815234602082015233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2005b600080fd5b3480156101c457600080fd5b50604051600181526020015b60405180910390f35b3480156101e557600080fd5b506101f96101f436600461237e565b6104c2565b005b34801561020757600080fd5b506101f961021636600461237e565b61095d565b34801561022757600080fd5b50610230610f0b565b6040519081526020016101d0565b34801561024a57600080fd5b506101f961025936600461240b565b610f1a565b34801561026a57600080fd5b506101f9610279366004612435565b611013565b34801561028a57600080fd5b5061023060035481565b3480156102a057600080fd5b506101f96102af366004612468565b6111a7565b6101f96102c23660046125c6565b61121d565b3480156102d357600080fd5b5061023061123c565b3480156102e857600080fd5b506101f96102f7366004612468565b611259565b34801561030857600080fd5b5060025461031c906001600160a01b031681565b6040516001600160a01b0390911681526020016101d0565b34801561034057600080fd5b506101f96112cf565b34801561035557600080fd5b5061035e6112e3565b6040516101d09796959493929190612663565b34801561037d57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661031c565b3480156103ba57600080fd5b5060015461031c906001600160a01b031681565b3480156103da57600080fd5b506101f96103e93660046126fc565b61138f565b3480156103fa57600080fd5b5061041f604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101d0919061275e565b34801561043857600080fd5b50610230610447366004612435565b600060208181529281526040808220909352908152205481565b34801561046d57600080fd5b506101f9611534565b34801561048257600080fd5b5061023060045481565b34801561049857600080fd5b5061023060055481565b3480156104ae57600080fd5b506101f96104bd366004612468565b611565565b6001546001600160a01b031633146104f55760405162461bcd60e51b81526004016104ec90612771565b60405180910390fd5b600354156105535760405162461bcd60e51b815260206004820152602560248201527f426174636820696e2070726f67726573732c207375626d6974206f7220726f6c6044820152646c6261636b60d81b60648201526084016104ec565b6001600061056383850185612a86565b602081015151815151919250146105cc5760405162461bcd60e51b815260206004820152602760248201527f496e76616c6964206164647265737320616e64207472616465206c69737473206044820152666c656e6774687360c81b60648201526084016104ec565b60005b8160400151518163ffffffff16101561093357600082604001518263ffffffff168151811061060057610600612b94565b6020026020010151606001519050600083604001518363ffffffff168151811061062c5761062c612b94565b602002602001015160000151905060005b84604001518463ffffffff168151811061065957610659612b94565b602002602001015160200151518163ffffffff1610156106dd5784604001518463ffffffff168151811061068f5761068f612b94565b6020026020010151602001518163ffffffff16815181106106b2576106b2612b94565b602002602001015160200151836106c99190612baa565b9250806106d581612bd2565b91505061063d565b5060005b84604001518463ffffffff16815181106106fd576106fd612b94565b602002602001015160400151518163ffffffff1610156108ca57600085604001518563ffffffff168151811061073557610735612b94565b6020026020010151604001518263ffffffff168151811061075857610758612b94565b602002602001015160200151905080846107729190612bf5565b9350600086604001518663ffffffff168151811061079257610792612b94565b6020026020010151604001518363ffffffff16815181106107b5576107b5612b94565b60200260200101516000015161ffff169050600087600001518263ffffffff16815181106107e5576107e5612b94565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928a16825291909352909120549091508311156108b45760009850806001600160a01b03167fa6944c7e44656df0115b6c88671d15c19cb3248c813c5806eaf26312e85b5dc989602001518463ffffffff168151811061086b5761086b612b94565b602090810291909101810151516001600160a01b0380861660009081528084526040808220928c16825291909352918290205491516108ab928891612c58565b60405180910390a25b50505080806108c290612bd2565b9150506106e1565b50811561091e5783604001518363ffffffff16815181106108ed576108ed612b94565b6020908102919091010151516040516337f855c760e01b81526001600160a01b0390911660048201526024016104ec565b5050808061092b90612bd2565b9150506105cf565b50811561095757838360405161094a929190612c7d565b6040519081900390206003555b50505050565b6001546001600160a01b031633146109875760405162461bcd60e51b81526004016104ec90612771565b6003546000036109cd5760405162461bcd60e51b8152602060048201526011602482015270139bc818985d18da081c1c995c185c9959607a1b60448201526064016104ec565b81816040516109dd929190612c7d565b604051809103902060035414610a405760405162461bcd60e51b815260206004820152602260248201527f4861736820646f6573206e6f74206d61746368207072657061726564206261746044820152610c6d60f31b60648201526084016104ec565b6000610a4e82840184612a86565b905060005b8160400151518163ffffffff161015610e4857600082604001518263ffffffff1681518110610a8457610a84612b94565b602002602001015160000151905060005b83604001518363ffffffff1681518110610ab157610ab1612b94565b602002602001015160200151518163ffffffff161015610bdf57600084604001518463ffffffff1681518110610ae957610ae9612b94565b6020026020010151602001518263ffffffff1681518110610b0c57610b0c612b94565b60200260200101516020015190506000856000015186604001518663ffffffff1681518110610b3d57610b3d612b94565b6020026020010151602001518463ffffffff1681518110610b6057610b60612b94565b60200260200101516000015161ffff1681518110610b8057610b80612b94565b6020908102919091018101516001600160a01b03808216600090815280845260408082209289168252919093528220805491935084929091610bc390849061236b565b9250508190555050508080610bd790612bd2565b915050610a95565b5060005b83604001518363ffffffff1681518110610bff57610bff612b94565b602002602001015160400151518163ffffffff161015610d9c57600084604001518463ffffffff1681518110610c3757610c37612b94565b6020026020010151604001518263ffffffff1681518110610c5a57610c5a612b94565b60200260200101516020015190506000856000015186604001518663ffffffff1681518110610c8b57610c8b612b94565b6020026020010151604001518463ffffffff1681518110610cae57610cae612b94565b60200260200101516000015161ffff1681518110610cce57610cce612b94565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928916825291909352909120549091508211610d48576001600160a01b0380821660009081526020818152604080832093881683529290529081208054849290610d3d908490612c8d565b90915550610d879050565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b60448201526064016104ec565b50508080610d9490612bd2565b915050610be3565b5082604001518263ffffffff1681518110610db957610db9612b94565b602002602001015160600151600014610e355782604001518263ffffffff1681518110610de857610de8612b94565b602090810291909101810151606001516002546001600160a01b03908116600090815280845260408082209286168252919093528220805491929091610e2f90849061236b565b90915550505b5080610e4081612bd2565b915050610a53565b5060005b8160200151518163ffffffff161015610efa578151805163ffffffff8316908110610e7957610e79612b94565b60200260200101516001600160a01b03167f8371f930fec32c9b3def9889038e3a93c3df73bc83aa9e6c01c806a70b2cce1783602001518363ffffffff1681518110610ec757610ec7612b94565b602002602001015160000151604051610ee09190612ca0565b60405180910390a280610ef281612bd2565b915050610e4c565b505060038054600455600090555050565b6000610f156115a3565b905090565b6040516323b872dd60e01b81523360048201523060248201526044810182905282906001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f939190612cb3565b50336000908152602081815260408083206001600160a01b038716845290915281208054849290610fc590849061236b565b9091555050604080516001600160a01b03851681526020810184905233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156110585750825b90506000826001600160401b031660011480156110745750303b155b905081158015611082575080155b156110a05760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156110ca57845460ff60401b1916600160401b1785555b6110d3336115ad565b6110db6115be565b6111286040518060400160405280600e81526020016d436861696e52696e67204c61627360901b81525060405180604001604052806005815260200164302e302e3160d81b8152506115c6565b600180546001600160a01b03808a166001600160a01b0319928316179092556002805492891692909116919091179055831561119e57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6111af6115d8565b6001600160a01b0381166111fb5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b60448201526064016104ec565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b611225611633565b61122e826116d8565b61123882826116e0565b5050565b60006112466117a2565b506000805160206130af83398151915290565b6112616115d8565b6001600160a01b0381166112ad5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b60448201526064016104ec565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6112d76115d8565b6112e160006117eb565b565b6000606080828080838160008051602061308f833981519152805490915015801561131057506001810154155b6113545760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b60448201526064016104ec565b61135c61185c565b61136461191f565b60408051600080825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b6001546001600160a01b031633146113b95760405162461bcd60e51b81526004016104ec90612771565b600354156114095760405162461bcd60e51b815260206004820152601b60248201527f536574746c656d656e7420626174636820696e2070726f63657373000000000060448201526064016104ec565b60005b8181101561152257600083838381811061142857611428612b94565b905060200281019061143a9190612cd5565b600081811061144b5761144b612b94565b919091013560f81c9050600181111561146657611466612d22565b9050600084848481811061147c5761147c612b94565b905060200281019061148e9190612cd5565b61149c916001908290612d38565b8101906114a99190612d79565b90506114b5818361195e565b156115185760018260018111156114ce576114ce612d22565b036114f85780516020808301518051918101516040909101516114f393929190611ace565b611518565b805160208083015180519181015160409091015161151893929190611b12565b505060010161140c565b5061152d8282611ce8565b6005555050565b6001546001600160a01b0316331461155e5760405162461bcd60e51b81526004016104ec90612771565b6000600355565b61156d6115d8565b6001600160a01b03811661159757604051631e4fbdf760e01b8152600060048201526024016104ec565b6115a0816117eb565b50565b6000610f15611d7d565b6115b5611df1565b6115a081611e3a565b6112e1611df1565b6115ce611df1565b6112388282611e42565b3361160a7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146112e15760405163118cdaa760e01b81523360048201526024016104ec565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806116ba57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116ae6000805160206130af833981519152546001600160a01b031690565b6001600160a01b031614155b156112e15760405163703e46dd60e11b815260040160405180910390fd5b6115a06115d8565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561173a575060408051601f3d908101601f1916820190925261173791810190612e46565b60015b61176257604051634c9c8ce360e01b81526001600160a01b03831660048201526024016104ec565b6000805160206130af833981519152811461179357604051632a87526960e21b8152600481018290526024016104ec565b61179d8383611ea3565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112e15760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d102805460609160008051602061308f8339815191529161189b90612e5f565b80601f01602080910402602001604051908101604052809291908181526020018280546118c790612e5f565b80156119145780601f106118e957610100808354040283529160200191611914565b820191906000526020600020905b8154815290600101906020018083116118f757829003601f168201915b505050505091505090565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d103805460609160008051602061308f8339815191529161189b90612e5f565b600080611a2460405180608001604052806042815260200161304d60429139805160209182012086820151805192015190919060018760018111156119a5576119a5612d22565b146119b8578760200151604001516119bb565b60005b6020808a015160600151604051611a099695949392019485526001600160a01b03938416602086015291909216604084015260608301919091526001600160401b0316608082015260a00190565b60405160208183030381529060405280519060200120611ef9565b90506000611a36828660400151611f26565b90508460200151600001516001600160a01b0316816001600160a01b031614611ac157602080860151805187519282015160409283015192516001600160a01b03909216937fa85a3ffa879b141fb40464894b63d202701aba54ee2801511bd508979157e5b293611aae939192916000908190612ebb565b60405180910390a2600092505050611ac8565b6001925050505b92915050565b6001600160a01b0380841660009081526020818152604080832093861683529290522054611b0b858585848611611b055785611b12565b84611b12565b5050505050565b6001600160a01b038084166000908152602081815260408083209386168352929052205480821115611b8d57836001600160a01b03167fa85a3ffa879b141fb40464894b63d202701aba54ee2801511bd508979157e5b2868585856001604051611b80959493929190612ebb565b60405180910390a2611b0b565b6001600160a01b0380851660009081526020818152604080832093871683529290529081208054849290611bc2908490612c8d565b90915550506001600160a01b038316611c11576040516001600160a01b0385169083156108fc029084906000818181858888f19350505050158015611c0b573d6000803e3d6000fd5b50611c8a565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905284919082169063a9059cbb906044016020604051808303816000875af1158015611c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c879190612cb3565b50505b604080516001600160401b03871681526001600160a01b038581166020830152918101849052908516907f6802095218c952486cd6547b39c14f33f3df56227874ddce0b7bf5e236eb256c9060600160405180910390a25050505050565b6040805160008082526020820190925260005b83811015611d6d576000858583818110611d1757611d17612b94565b9050602002810190611d299190612cd5565b604051611d37929190612c7d565b6040519081900381209150611d529084908390602001612eff565b60408051601f19818403018152919052925050600101611cfb565b5080516020909101209392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611da8611f50565b611db0611fba565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166112e157604051631afcd79f60e31b815260040160405180910390fd5b61156d611df1565b611e4a611df1565b60008051602061308f8339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d102611e848482612f71565b5060038101611e938382612f71565b5060008082556001909101555050565b611eac82611ffe565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611ef15761179d8282612063565b6112386120d9565b6000611ac8611f066115a3565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600080611f3686866120f8565b925092509250611f468282612145565b5090949350505050565b600060008051602061308f83398151915281611f6a61185c565b805190915015611f8257805160209091012092915050565b81548015611f91579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b600060008051602061308f83398151915281611fd461191f565b805190915015611fec57805160209091012092915050565b60018201548015611f91579392505050565b806001600160a01b03163b60000361203457604051634c9c8ce360e01b81526001600160a01b03821660048201526024016104ec565b6000805160206130af83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b0316846040516120809190613030565b600060405180830381855af49150503d80600081146120bb576040519150601f19603f3d011682016040523d82523d6000602084013e6120c0565b606091505b50915091506120d08583836121fe565b95945050505050565b34156112e15760405163b398979f60e01b815260040160405180910390fd5b600080600083516041036121325760208401516040850151606086015160001a6121248882858561225d565b95509550955050505061213e565b50508151600091506002905b9250925092565b600082600381111561215957612159612d22565b03612162575050565b600182600381111561217657612176612d22565b036121945760405163f645eedf60e01b815260040160405180910390fd5b60028260038111156121a8576121a8612d22565b036121c95760405163fce698f760e01b8152600481018290526024016104ec565b60038260038111156121dd576121dd612d22565b03611238576040516335e2f38360e21b8152600481018290526024016104ec565b6060826122135761220e8261232c565b612256565b815115801561222a57506001600160a01b0384163b155b1561225357604051639996b31560e01b81526001600160a01b03851660048201526024016104ec565b50805b9392505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156122985750600091506003905082612322565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156122ec573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661231857506000925060019150829050612322565b9250600091508190505b9450945094915050565b80511561233c5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115611ac857611ac8612355565b6000806020838503121561239157600080fd5b82356001600160401b03808211156123a857600080fd5b818501915085601f8301126123bc57600080fd5b8135818111156123cb57600080fd5b8660208285010111156123dd57600080fd5b60209290920196919550909350505050565b80356001600160a01b038116811461240657600080fd5b919050565b6000806040838503121561241e57600080fd5b612427836123ef565b946020939093013593505050565b6000806040838503121561244857600080fd5b612451836123ef565b915061245f602084016123ef565b90509250929050565b60006020828403121561247a57600080fd5b612256826123ef565b634e487b7160e01b600052604160045260246000fd5b604051602081016001600160401b03811182821017156124bb576124bb612483565b60405290565b604080519081016001600160401b03811182821017156124bb576124bb612483565b604051608081016001600160401b03811182821017156124bb576124bb612483565b604051606081016001600160401b03811182821017156124bb576124bb612483565b604051601f8201601f191681016001600160401b038111828210171561254f5761254f612483565b604052919050565b600082601f83011261256857600080fd5b81356001600160401b0381111561258157612581612483565b612594601f8201601f1916602001612527565b8181528460208386010111156125a957600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156125d957600080fd5b6125e2836123ef565b915060208301356001600160401b038111156125fd57600080fd5b61260985828601612557565b9150509250929050565b60005b8381101561262e578181015183820152602001612616565b50506000910152565b6000815180845261264f816020860160208601612613565b601f01601f19169290920160200192915050565b60ff60f81b881681526000602060e0602084015261268460e084018a612637565b8381036040850152612696818a612637565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b818110156126ea578351835292840192918401916001016126ce565b50909c9b505050505050505050505050565b6000806020838503121561270f57600080fd5b82356001600160401b038082111561272657600080fd5b818501915085601f83011261273a57600080fd5b81358181111561274957600080fd5b8660208260051b85010111156123dd57600080fd5b6020815260006122566020830184612637565b6020808252601b908201527f53656e646572206973206e6f7420746865207375626d69747465720000000000604082015260600190565b60006001600160401b038211156127c1576127c1612483565b5060051b60200190565b600082601f8301126127dc57600080fd5b813560206127f16127ec836127a8565b612527565b828152600592831b850182019282820191908785111561281057600080fd5b8387015b858110156128e05780356001600160401b03808211156128345760008081fd5b90890190818b03601f190187131561284c5760008081fd5b612854612499565b87830135828111156128665760008081fd5b8084019350508b603f84011261287e57600091508182fd5b87830135915060406128926127ec846127a8565b83815292861b8401810192898101908e8511156128af5760008081fd5b948201945b848610156128cd5785358252948a0194908a01906128b4565b8352505086525050928401928401612814565b5090979650505050505050565b600082601f8301126128fe57600080fd5b8135602061290e6127ec836127a8565b82815260069290921b8401810191818101908684111561292d57600080fd5b8286015b8481101561297d576040818903121561294a5760008081fd5b6129526124c1565b813561ffff811681146129655760008081fd5b81528185013585820152835291830191604001612931565b509695505050505050565b600082601f83011261299957600080fd5b813560206129a96127ec836127a8565b82815260059290921b840181019181810190868411156129c857600080fd5b8286015b8481101561297d5780356001600160401b03808211156129ec5760008081fd5b908801906080828b03601f1901811315612a065760008081fd5b612a0e6124e3565b612a198885016123ef565b815260408085013584811115612a2f5760008081fd5b612a3d8e8b838901016128ed565b8a8401525060608086013585811115612a565760008081fd5b612a648f8c838a01016128ed565b92840192909252949092013593810193909352505083529183019183016129cc565b60006020808385031215612a9957600080fd5b82356001600160401b0380821115612ab057600080fd5b9084019060608287031215612ac457600080fd5b612acc612505565b823582811115612adb57600080fd5b8301601f81018813612aec57600080fd5b8035612afa6127ec826127a8565b81815260059190911b8201860190868101908a831115612b1957600080fd5b928701925b82841015612b3e57612b2f846123ef565b82529287019290870190612b1e565b84525050508284013582811115612b5457600080fd5b612b60888286016127cb565b85830152506040830135935081841115612b7957600080fd5b612b8587858501612988565b60408201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b8082018281126000831280158216821582161715612bca57612bca612355565b505092915050565b600063ffffffff808316818103612beb57612beb612355565b6001019392505050565b8181036000831280158383131683831282161715612c1557612c15612355565b5092915050565b60008151808452602080850194506020840160005b83811015612c4d57815187529582019590820190600101612c31565b509495945050505050565b606081526000612c6b6060830186612c1c565b60208301949094525060400152919050565b8183823760009101908152919050565b81810381811115611ac857611ac8612355565b6020815260006122566020830184612c1c565b600060208284031215612cc557600080fd5b8151801515811461225657600080fd5b6000808335601e19843603018112612cec57600080fd5b8301803591506001600160401b03821115612d0657600080fd5b602001915036819003821315612d1b57600080fd5b9250929050565b634e487b7160e01b600052602160045260246000fd5b60008085851115612d4857600080fd5b83861115612d5557600080fd5b5050820193919092039150565b80356001600160401b038116811461240657600080fd5b600060208284031215612d8b57600080fd5b81356001600160401b0380821115612da257600080fd5b9083019081850360c0811215612db757600080fd5b612dbf612505565b612dc884612d62565b81526080601f1983011215612ddc57600080fd5b612de46124e3565b9150612df2602085016123ef565b8252612e00604085016123ef565b602083015260608401356040830152612e1b60808501612d62565b606083015281602082015260a0840135915082821115612e3a57600080fd5b612b8587838601612557565b600060208284031215612e5857600080fd5b5051919050565b600181811c90821680612e7357607f821691505b602082108103612e9357634e487b7160e01b600052602260045260246000fd5b50919050565b60028110612eb757634e487b7160e01b600052602160045260246000fd5b9052565b6001600160401b03861681526001600160a01b0385166020820152604081018490526060810183905260a08101612ef56080830184612e99565b9695505050505050565b60008351612f11818460208801612613565b9190910191825250602001919050565b601f82111561179d576000816000526020600020601f850160051c81016020861015612f4a5750805b601f850160051c820191505b81811015612f6957828155600101612f56565b505050505050565b81516001600160401b03811115612f8a57612f8a612483565b612f9e81612f988454612e5f565b84612f21565b602080601f831160018114612fd35760008415612fbb5750858301515b600019600386901b1c1916600185901b178555612f69565b600085815260208120601f198616915b8281101561300257888601518255948401946001909101908401612fe3565b50858210156130205787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251613042818460208701612613565b919091019291505056fe576974686472617728616464726573732073656e6465722c6164647265737320746f6b656e2c75696e7432353620616d6f756e742c75696e743634206e6f6e636529a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca26469706673582212209239046b8917329f670f5f6a44bf1256424145042ff76114042d351eb8f9648364736f6c63430008180033";

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_UPGRADE_INTERFACE_VERSION = "UPGRADE_INTERFACE_VERSION";

    public static final String FUNC_BALANCES = "balances";

    public static final String FUNC_BATCHHASH = "batchHash";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FEEACCOUNT = "feeAccount";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_LASTSETTLEMENTBATCHHASH = "lastSettlementBatchHash";

    public static final String FUNC_LASTWITHDRAWALBATCHHASH = "lastWithdrawalBatchHash";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PREPARESETTLEMENTBATCH = "prepareSettlementBatch";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROLLBACKBATCH = "rollbackBatch";

    public static final String FUNC_SETFEEACCOUNT = "setFeeAccount";

    public static final String FUNC_SETSUBMITTER = "setSubmitter";

    public static final String FUNC_SUBMITSETTLEMENTBATCH = "submitSettlementBatch";

    public static final String FUNC_SUBMITWITHDRAWALS = "submitWithdrawals";

    public static final String FUNC_SUBMITTER = "submitter";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETTLEMENTCOMPLETED_EVENT = new Event("SettlementCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event SETTLEMENTFAILED_EVENT = new Event("SettlementFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event WITHDRAWAL_EVENT = new Event("Withdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALFAILED_EVENT = new Event("WithdrawalFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
    ;

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> UPGRADE_INTERFACE_VERSION() {
        final Function function = new Function(FUNC_UPGRADE_INTERFACE_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balances(String param0, String param1) {
        final Function function = new Function(FUNC_BALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> batchHash() {
        final Function function = new Function(FUNC_BATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(String _token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain() {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> feeAccount() {
        final Function function = new Function(FUNC_FEEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getVersion() {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _submitter, String _feeAccount) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter), 
                new org.web3j.abi.datatypes.Address(160, _feeAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> lastSettlementBatchHash() {
        final Function function = new Function(FUNC_LASTSETTLEMENTBATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> lastWithdrawalBatchHash() {
        final Function function = new Function(FUNC_LASTWITHDRAWALBATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_PREPARESETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rollbackBatch() {
        final Function function = new Function(
                FUNC_ROLLBACKBATCH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeAccount(String _feeAccount) {
        final Function function = new Function(
                FUNC_SETFEEACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _feeAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSubmitter(String _submitter) {
        final Function function = new Function(
                FUNC_SETSUBMITTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_SUBMITSETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitWithdrawals(List<byte[]> withdrawals) {
        final Function function = new Function(
                FUNC_SUBMITWITHDRAWALS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(withdrawals, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> submitter() {
        final Function function = new Function(FUNC_SUBMITTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public static List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DepositEventResponse getDepositEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEPOSIT_EVENT, log);
        DepositEventResponse typedResponse = new DepositEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDepositEventFromLog(log));
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<SettlementCompletedEventResponse> getSettlementCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, transactionReceipt);
        ArrayList<SettlementCompletedEventResponse> responses = new ArrayList<SettlementCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementCompletedEventResponse getSettlementCompletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, log);
        SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementCompletedEventFromLog(log));
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTCOMPLETED_EVENT));
        return settlementCompletedEventFlowable(filter);
    }

    public static List<SettlementFailedEventResponse> getSettlementFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, transactionReceipt);
        ArrayList<SettlementFailedEventResponse> responses = new ArrayList<SettlementFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.requestedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementFailedEventResponse getSettlementFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, log);
        SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.requestedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementFailedEventFromLog(log));
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTFAILED_EVENT));
        return settlementFailedEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalEventResponse getWithdrawalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, log);
        WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalEventFromLog(log));
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    public static List<WithdrawalFailedEventResponse> getWithdrawalFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALFAILED_EVENT, transactionReceipt);
        ArrayList<WithdrawalFailedEventResponse> responses = new ArrayList<WithdrawalFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalFailedEventResponse typedResponse = new WithdrawalFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalFailedEventResponse getWithdrawalFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALFAILED_EVENT, log);
        WithdrawalFailedEventResponse typedResponse = new WithdrawalFailedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalFailedEventResponse> withdrawalFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalFailedEventFromLog(log));
    }

    public Flowable<WithdrawalFailedEventResponse> withdrawalFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALFAILED_EVENT));
        return withdrawalFailedEventFlowable(filter);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String from;

        public String token;

        public BigInteger amount;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SettlementCompletedEventResponse extends BaseEventResponse {
        public String _address;

        public List<byte[]> tradeHashes;
    }

    public static class SettlementFailedEventResponse extends BaseEventResponse {
        public String _address;

        public List<byte[]> tradeHashes;

        public BigInteger requestedAmount;

        public BigInteger balance;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger sequence;

        public String token;

        public BigInteger amount;
    }

    public static class WithdrawalFailedEventResponse extends BaseEventResponse {
        public String _address;

        public BigInteger sequence;

        public String token;

        public BigInteger amount;

        public BigInteger balance;

        public BigInteger errorCode;
    }
}
