package co.chainring.contracts.generated;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class Exchange extends Contract {
    public static final String BINARY = "60a06040523060805234801561001457600080fd5b5060805161466061003e60003960008181611ace01528181611af70152611c3801526146606000f3fe60806040526004361061016a5760003560e01c8063715018a6116100d1578063a07581c61161008a578063c23f001f11610064578063c23f001f146104ca578063d1e32f67146104ff578063da235f1714610514578063f2fde38b1461053457600080fd5b8063a07581c614610456578063ad3cb1cc14610476578063c187bdf0146104b457600080fd5b8063715018a61461035a57806384b0196e1461036f57806389232a00146103975780638da5cb5b146103b75780638dc45d9a146103f457806395880b401461041457600080fd5b80634a34d434116101235780634a34d434146102a45780634b023cf8146102ba5780634f1ef286146102da57806352d1902d146102ed5780635a91f7431461030257806365e17c9d1461032257600080fd5b80630d8e6e2c146101de57806324a9b806146101ff57806330176c861461022157806332fdb3e8146102415780633644e5151461026157806347e7ef241461028457600080fd5b366101d957336000908152602081815260408083208380529091528120805434929061019790849061326d565b9091555050604080516000815234602082015233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2005b600080fd5b3480156101ea57600080fd5b50604051600181526020015b60405180910390f35b34801561020b57600080fd5b5061021f61021a366004613280565b610554565b005b34801561022d57600080fd5b5061021f61023c366004613280565b610985565b34801561024d57600080fd5b5061021f61025c3660046132f1565b610eec565b34801561026d57600080fd5b50610276611120565b6040519081526020016101f6565b34801561029057600080fd5b5061021f61029f36600461336f565b61112f565b3480156102b057600080fd5b5061027660055481565b3480156102c657600080fd5b5061021f6102d5366004613399565b611228565b61021f6102e836600461351a565b61129e565b3480156102f957600080fd5b506102766112bd565b34801561030e57600080fd5b5061021f61031d366004613399565b6112da565b34801561032e57600080fd5b50600354610342906001600160a01b031681565b6040516001600160a01b0390911681526020016101f6565b34801561036657600080fd5b5061021f611350565b34801561037b57600080fd5b50610384611364565b6040516101f697969594939291906135b7565b3480156103a357600080fd5b5061021f6103b236600461365f565b611410565b3480156103c357600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610342565b34801561040057600080fd5b50600254610342906001600160a01b031681565b34801561042057600080fd5b5061044461042f366004613399565b60046020526000908152604090205460ff1681565b60405160ff90911681526020016101f6565b34801561046257600080fd5b5061021f6104713660046132f1565b6115de565b34801561048257600080fd5b506104a7604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101f691906136a6565b3480156104c057600080fd5b5061027660015481565b3480156104d657600080fd5b506102766104e53660046136b9565b600060208181529281526040808220909352908152205481565b34801561050b57600080fd5b5061021f6116a7565b34801561052057600080fd5b5061021f61052f3660046132f1565b6116d8565b34801561054057600080fd5b5061021f61054f366004613399565b6117e0565b6002546001600160a01b031633146105875760405162461bcd60e51b815260040161057e906136ec565b60405180910390fd5b600554156105a75760405162461bcd60e51b815260040161057e90613723565b600160006105b783850185613a46565b602081015151815151919250146106205760405162461bcd60e51b815260206004820152602760248201527f496e76616c6964206164647265737320616e64207472616465206c69737473206044820152666c656e6774687360c81b606482015260840161057e565b60005b8160400151518163ffffffff16101561095b57600082604001518263ffffffff168151811061065457610654613b54565b6020026020010151606001519050600083604001518363ffffffff168151811061068057610680613b54565b602002602001015160000151905060005b84604001518463ffffffff16815181106106ad576106ad613b54565b602002602001015160200151518163ffffffff1610156107315784604001518463ffffffff16815181106106e3576106e3613b54565b6020026020010151602001518163ffffffff168151811061070657610706613b54565b6020026020010151602001518361071d9190613b6a565b92508061072981613b92565b915050610691565b5060005b84604001518463ffffffff168151811061075157610751613b54565b602002602001015160400151518163ffffffff1610156108f257600085604001518563ffffffff168151811061078957610789613b54565b6020026020010151604001518263ffffffff16815181106107ac576107ac613b54565b602002602001015160200151905080846107c69190613bb5565b9350600086604001518663ffffffff16815181106107e6576107e6613b54565b6020026020010151604001518363ffffffff168151811061080957610809613b54565b60200260200101516000015161ffff169050600087600001518263ffffffff168151811061083957610839613b54565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928a16825291909352909120549091508311156108dc57600098507f5c35030a0e818fc3bc61d5448a0baedb9bf6b1590fb888a6c25f4b814be34bbf8189602001518463ffffffff16815181106108b6576108b6613b54565b60200260200101516000015160016040516108d393929190613c50565b60405180910390a15b50505080806108ea90613b92565b915050610735565b5081156109465783604001518363ffffffff168151811061091557610915613b54565b6020908102919091010151516040516337f855c760e01b81526001600160a01b03909116600482015260240161057e565b5050808061095390613b92565b915050610623565b50811561097f578383604051610972929190613c83565b6040519081900390206005555b50505050565b6002546001600160a01b031633146109af5760405162461bcd60e51b815260040161057e906136ec565b6005546000036109f55760405162461bcd60e51b8152602060048201526011602482015270139bc818985d18da081c1c995c185c9959607a1b604482015260640161057e565b8181604051610a05929190613c83565b604051809103902060055414610a2d5760405162461bcd60e51b815260040161057e90613c93565b6000610a3b82840184613a46565b905060005b8160400151518163ffffffff161015610e3557600082604001518263ffffffff1681518110610a7157610a71613b54565b602002602001015160000151905060005b83604001518363ffffffff1681518110610a9e57610a9e613b54565b602002602001015160200151518163ffffffff161015610bcc57600084604001518463ffffffff1681518110610ad657610ad6613b54565b6020026020010151602001518263ffffffff1681518110610af957610af9613b54565b60200260200101516020015190506000856000015186604001518663ffffffff1681518110610b2a57610b2a613b54565b6020026020010151602001518463ffffffff1681518110610b4d57610b4d613b54565b60200260200101516000015161ffff1681518110610b6d57610b6d613b54565b6020908102919091018101516001600160a01b03808216600090815280845260408082209289168252919093528220805491935084929091610bb090849061326d565b9250508190555050508080610bc490613b92565b915050610a82565b5060005b83604001518363ffffffff1681518110610bec57610bec613b54565b602002602001015160400151518163ffffffff161015610d8957600084604001518463ffffffff1681518110610c2457610c24613b54565b6020026020010151604001518263ffffffff1681518110610c4757610c47613b54565b60200260200101516020015190506000856000015186604001518663ffffffff1681518110610c7857610c78613b54565b6020026020010151604001518463ffffffff1681518110610c9b57610c9b613b54565b60200260200101516000015161ffff1681518110610cbb57610cbb613b54565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928916825291909352909120549091508211610d35576001600160a01b0380821660009081526020818152604080832093881683529290529081208054849290610d2a908490613cd5565b90915550610d749050565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b604482015260640161057e565b50508080610d8190613b92565b915050610bd0565b5082604001518263ffffffff1681518110610da657610da6613b54565b602002602001015160600151600014610e225782604001518263ffffffff1681518110610dd557610dd5613b54565b602090810291909101810151606001516003546001600160a01b03908116600090815280845260408082209286168252919093528220805491929091610e1c90849061326d565b90915550505b5080610e2d81613b92565b915050610a40565b5060005b8160200151518163ffffffff161015610ee1577f8371f930fec32c9b3def9889038e3a93c3df73bc83aa9e6c01c806a70b2cce1782600001518263ffffffff1681518110610e8957610e89613b54565b602002602001015183602001518363ffffffff1681518110610ead57610ead613b54565b602002602001015160000151604051610ec7929190613ce8565b60405180910390a180610ed981613b92565b915050610e39565b505060006005555050565b6002546001600160a01b03163314610f165760405162461bcd60e51b815260040161057e906136ec565b60055415610f365760405162461bcd60e51b815260040161057e90613723565b60408051808201909152600080825260019160208101610f57856004613d0c565b6001600160401b03811115610f6e57610f6e6133b4565b604051908082528060200260200182016040528015610fb957816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181610f8c5790505b509052905060005b8381101561101257366000868684818110610fde57610fde613b54565b9050602002810190610ff09190613d23565b91509150610fff82828661181e565b61100857600094505b5050600101610fc1565b5080515b63ffffffff81161561110657600061102f600183613d70565b905082602001518163ffffffff168151811061104d5761104d613b54565b60200260200101516040015160008085602001518463ffffffff168151811061107857611078613b54565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600085602001518463ffffffff16815181106110c2576110c2613b54565b6020026020010151602001516001600160a01b03166001600160a01b03168152602001908152602001600020819055505080806110fe90613d8d565b915050611016565b50811561097f5761111784846119d5565b60055550505050565b600061112a611a5e565b905090565b6040516323b872dd60e01b81523360048201523060248201526044810182905282906001600160a01b038216906323b872dd906064016020604051808303816000875af1158015611184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a89190613dad565b50336000908152602081815260408083206001600160a01b0387168452909152812080548492906111da90849061326d565b9091555050604080516001600160a01b03851681526020810184905233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2505050565b611230611a68565b6001600160a01b03811661127c5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b604482015260640161057e565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6112a6611ac3565b6112af82611b68565b6112b98282611b70565b5050565b60006112c7611c2d565b506000805160206145a883398151915290565b6112e2611a68565b6001600160a01b03811661132e5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b604482015260640161057e565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b611358611a68565b6113626000611c76565b565b60006060808280808381600080516020614588833981519152805490915015801561139157506001810154155b6113d55760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b604482015260640161057e565b6113dd611ce7565b6113e5611daa565b60408051600080825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156114555750825b90506000826001600160401b031660011480156114715750303b155b90508115801561147f575080155b1561149d5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156114c757845460ff60401b1916600160401b1785555b6114d033611de9565b6114d8611dfa565b6115256040518060400160405280600e81526020016d436861696e52696e67204c61627360901b81525060405180604001604052806005815260200164302e302e3160d81b815250611e02565b600280546001600160a01b03808b166001600160a01b03199283161790925560038054928a16929091169190911790556000805260046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec805460ff881660ff1990911617905583156115d457845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6002546001600160a01b031633146116085760405162461bcd60e51b815260040161057e906136ec565b600554156116585760405162461bcd60e51b815260206004820152601b60248201527f536574746c656d656e7420626174636820696e2070726f636573730000000000604482015260640161057e565b60005b818110156116a25736600084848481811061167857611678613b54565b905060200281019061168a9190613d23565b915091506116988282611e14565b505060010161165b565b505050565b6002546001600160a01b031633146116d15760405162461bcd60e51b815260040161057e906136ec565b6000600555565b6002546001600160a01b031633146117025760405162461bcd60e51b815260040161057e906136ec565b6005546000036117485760405162461bcd60e51b8152602060048201526011602482015270139bc818985d18da081c1c995c185c9959607a1b604482015260640161057e565b61175282826119d5565b600554146117725760405162461bcd60e51b815260040161057e90613c93565b60005b818110156117bc5736600084848481811061179257611792613b54565b90506020028101906117a49190613d23565b915091506117b28282611f05565b5050600101611775565b5081819050600160008282546117d2919061326d565b909155505060006005555050565b6117e8611a68565b6001600160a01b03811661181257604051631e4fbdf760e01b81526000600482015260240161057e565b61181b81611c76565b50565b6000808484600081811061183457611834613b54565b919091013560f81c9050600281111561184f5761184f613c18565b9050600081600281111561186557611865613c18565b036118d75760006118798560018189613dcf565b8101906118869190613e10565b602080820151805191015191925061189e9186612014565b6118a78161209f565b80156118ce575060208082015180519181015160409091015183516118ce93929190612150565b925050506119ce565b60018160028111156118eb576118eb613c18565b0361194c5760006118ff8560018189613dcf565b81019061190c9190613edd565b9050611922816020015160000151600086612014565b61192b816121a3565b80156118ce5750602080820151805191015182516118ce9291600091612150565b600281600281111561196057611960613c18565b03611990576119886119758560018189613dcf565b810190611982919061401f565b84612210565b9150506119ce565b60405162461bcd60e51b81526020600482015260136024820152722ab735b737bbb7103a3930b739b0b1ba34b7b760691b604482015260640161057e565b9392505050565b6040805160008082526020820190925260005b83811015611a4c57366000868684818110611a0557611a05613b54565b9050602002810190611a179190613d23565b91509150838282604051602001611a309392919061410f565b60408051808303601f19018152919052935050506001016119e8565b50805160209091012090505b92915050565b600061112a61237f565b33611a9a7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146113625760405163118cdaa760e01b815233600482015260240161057e565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480611b4a57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611b3e6000805160206145a8833981519152546001600160a01b031690565b6001600160a01b031614155b156113625760405163703e46dd60e11b815260040160405180910390fd5b61181b611a68565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611bca575060408051601f3d908101601f19168201909252611bc791810190614137565b60015b611bf257604051634c9c8ce360e01b81526001600160a01b038316600482015260240161057e565b6000805160206145a88339815191528114611c2357604051632a87526960e21b81526004810182905260240161057e565b6116a283836123f3565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113625760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d102805460609160008051602061458883398151915291611d2690614150565b80601f0160208091040260200160405190810160405280929190818152602001828054611d5290614150565b8015611d9f5780601f10611d7457610100808354040283529160200191611d9f565b820191906000526020600020905b815481529060010190602001808311611d8257829003601f168201915b505050505091505090565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d103805460609160008051602061458883398151915291611d2690614150565b611df1612449565b61181b81612492565b611362612449565b611e0a612449565b6112b9828261249a565b600082826000818110611e2957611e29613b54565b919091013560f81c90506002811115611e4457611e44613c18565b90506000816002811115611e5a57611e5a613c18565b03611ea8576000611e6e8360018187613dcf565b810190611e7b9190613e10565b9050611e868161209f565b1561097f5760208082015180519181015160409091015161097f9291906124fb565b6001816002811115611ebc57611ebc613c18565b036116a2576000611ed08360018187613dcf565b810190611edd9190613edd565b9050611ee8816121a3565b1561097f57602080820151805191015161097f91906000906124fb565b600082826000818110611f1a57611f1a613b54565b919091013560f81c90506002811115611f3557611f35613c18565b90506000816002811115611f4b57611f4b613c18565b03611f8a576000611f5f8360018187613dcf565b810190611f6c9190613e10565b60208082015180519181015160409091015192935061097f926124fb565b6001816002811115611f9e57611f9e613c18565b03611fd9576000611fb28360018187613dcf565b810190611fbf9190613edd565b602080820151805191015191925061097f916000906124fb565b6002816002811115611fed57611fed613c18565b036116a2576116a26120028360018187613dcf565b81019061200f919061401f565b61265f565b604080516060810182526001600160a01b0380861680835290851660208084018290526000928352828152848320918352908152908390205492820192909252908201518251815163ffffffff90911690811061207357612073613b54565b6020026020010181905250600181600001818151612091919061418a565b63ffffffff16905250505050565b600080612132604051806080016040528060428152602001614546604291398051602091820120858201518051818401516040808401516060948501518251978801969096526001600160a01b039384169187019190915291169184019190915260808301526001600160401b031660a082015260c0015b6040516020818303038152906040528051906020012061290a565b90506119ce8360200151600001518285604001518660000151612937565b6001600160a01b03808516600090815260208181526040808320938716835292905290812054838203612181578093505b612197868661218f876141a7565b8660016129af565b9150505b949350505050565b600080612132604051806060016040528060348152602001614512603491398051602091820120858201518051818401516040928301518351958601949094526001600160a01b039091169184019190915260608301526001600160401b0316608082015260a001612117565b6000808360600151905060006122298560200151612b55565b61223490600a6142a7565b8560800151866060015161224891906142b6565b61225291906142e6565b905060008560a0015182612265906141a7565b61226f9190613bb5565b905060008660c00151836122839190613bb5565b60e08801515151602089015191925061229c9188612014565b610100870151515160208801516122b4919088612014565b60e0870151515160408801516122cb919088612014565b610100870151515160408801516122e3919088612014565b60e0870151515160208801518851612300929190879060006129af565b801561232b57506101008701515151602088015161232b9190612322876141a7565b8a5160006129af565b801561234f575060e087015151516040880151885161234f929190859060006129af565b80156123745750610100870151515160408801518851612374929190849060006129af565b979650505050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6123aa612c07565b6123b2612c71565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6123fc82612cb5565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115612441576116a28282612d1a565b6112b9612d87565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661136257604051631afcd79f60e31b815260040160405180910390fd5b6117e8612449565b6124a2612449565b6000805160206145888339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1026124dc8482614372565b50600381016124eb8382614372565b5060008082556001909101555050565b6001600160a01b038084166000908152602081815260408083209386168352929052908120549082900361252d578091505b6000612544858561253d866141a7565b6001612da6565b61254d906141a7565b90506001600160a01b038416612599576040516001600160a01b0386169082156108fc029083906000818181858888f19350505050158015612593573d6000803e3d6000fd5b50612612565b60405163a9059cbb60e01b81526001600160a01b0386811660048301526024820183905285919082169063a9059cbb906044016020604051808303816000875af11580156125eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260f9190613dad565b50505b604080516001600160a01b038681168252602082018490528716917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a25050505050565b6000612678826020015183604001518460e00151612f53565b9050600061269483602001518460400151856101000151612f53565b905060008360600151905060006126ae8560200151612b55565b6126b990600a6142a7565b856080015186606001516126cd91906142b6565b6126d791906142e6565b60e0860151515160208701519192506126f291846000612da6565b5061010085015151516020860151612715919061270e856141a7565b6000612da6565b5060008560a0015182612727906141a7565b6127319190613bb5565b905060008660c00151836127459190613bb5565b60e08801515151604089015191925061276091846000612da6565b506101008701515151604088015161277b9190836000612da6565b5060008760c001518860a00151612792919061326d565b11156127c457600354604088015160c089015160a08a01516127c2936001600160a01b0316929161270e9161326d565b505b8660e0015160000151600001516001600160a01b0316867fde6f615025abb6ad968087d53a6f48315fcec5ff80719963a7122f92d3ccfee889602001518a6040015160018c60e00151600001516040518060a001604052808c81526020018f6080015181526020018f60a0015181526020018c81526020018a815250604051612851959493929190614431565b60405180910390a386610100015160000151600001516001600160a01b0316857fde6f615025abb6ad968087d53a6f48315fcec5ff80719963a7122f92d3ccfee889602001518a6040015160008c6101000151600001516040518060a001604052808c6128bd906141a7565b81526020018f6080015181526020018f60c0015181526020018c6128e0906141a7565b81526020018990526040516128f9959493929190614431565b60405180910390a350505050505050565b6000611a58612917611a5e565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806129448585612fd3565b9050856001600160a01b0316816001600160a01b0316146129a3577f2277e8ee461df6206dceea54251b684f8de8c81cc2ebd56c249dba29f40097078360006040516129919291906144bb565b60405180910390a1600091505061219b565b50600195945050505050565b600080841215612b08576001600160a01b03808716600090815260208181526040808320938916835292905290812054906129e9866141a7565b905081811115612ad3578315612a8e57604080516001600160a01b03898116825260208201849052918101849052908916907fd03c7671e7c0af50b023090b014797cc5cb6464510f9c483945ab64f6f63cc079060600160405180910390a26001600160a01b03808916600090815260208181526040808320938b1683529290529081208054849290612a7d908490613cd5565b9091555060019350612b4c92505050565b7f2277e8ee461df6206dceea54251b684f8de8c81cc2ebd56c249dba29f4009707856001604051612ac09291906144bb565b60405180910390a1600092505050612b4c565b6001600160a01b03808916600090815260208181526040808320938b1683529290529081208054839290612a7d908490613cd5565b6001600160a01b0380871660009081526020818152604080832093891683529290529081208054869290612b3d90849061326d565b9091555060019150612b4c9050565b95945050505050565b6001600160a01b03811660009081526004602052604081205460ff16808203611a5857826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bda91906144d8565b6001600160a01b0384166000908152600460205260409020805460ff191660ff8316179055905092915050565b600060008051602061458883398151915281612c21611ce7565b805190915015612c3957805160209091012092915050565b81548015612c48579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b600060008051602061458883398151915281612c8b611daa565b805190915015612ca357805160209091012092915050565b60018201548015612c48579392505050565b806001600160a01b03163b600003612ceb57604051634c9c8ce360e01b81526001600160a01b038216600482015260240161057e565b6000805160206145a883398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051612d3791906144f5565b600060405180830381855af49150503d8060008114612d72576040519150601f19603f3d011682016040523d82523d6000602084013e612d77565b606091505b5091509150612b4c858383612ffd565b34156113625760405163b398979f60e01b815260040160405180910390fd5b600080831215612f10576001600160a01b0380861660009081526020818152604080832093881683529290529081205490612de0856141a7565b905081811115612ecb578315612e8c57604080516001600160a01b03888116825260208201849052918101849052908816907fd03c7671e7c0af50b023090b014797cc5cb6464510f9c483945ab64f6f63cc079060600160405180910390a26001600160a01b03808816600090815260208181526040808320938a1683529290529081208054849290612e74908490613cd5565b90915550612e839050826141a7565b9250505061219b565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161057e565b6001600160a01b03808816600090815260208181526040808320938a1683529290529081208054839290612f00908490613cd5565b9091555085935061219b92505050565b6001600160a01b0380861660009081526020818152604080832093881683529290529081208054859290612f4590849061326d565b9091555083915061219b9050565b600080612b4c6040518060a00160405280606381526020016145c860639139805160209182012085518051818401516040808401516060948501518251978801969096526001600160a01b0393841691870191909152828c1693860193909352908916608085015260a084015260c083015260e082015261010001612117565b600080600080612fe38686613059565b925092509250612ff382826130a6565b5090949350505050565b6060826130125761300d8261315f565b6119ce565b815115801561302957506001600160a01b0384163b155b1561305257604051639996b31560e01b81526001600160a01b038516600482015260240161057e565b50806119ce565b600080600083516041036130935760208401516040850151606086015160001a61308588828585613188565b95509550955050505061309f565b50508151600091506002905b9250925092565b60008260038111156130ba576130ba613c18565b036130c3575050565b60018260038111156130d7576130d7613c18565b036130f55760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561310957613109613c18565b0361312a5760405163fce698f760e01b81526004810182905260240161057e565b600382600381111561313e5761313e613c18565b036112b9576040516335e2f38360e21b81526004810182905260240161057e565b80511561316f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156131c3575060009150600390508261324d565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015613217573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166132435750600092506001915082905061324d565b9250600091508190505b9450945094915050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611a5857611a58613257565b6000806020838503121561329357600080fd5b82356001600160401b03808211156132aa57600080fd5b818501915085601f8301126132be57600080fd5b8135818111156132cd57600080fd5b8660208285010111156132df57600080fd5b60209290920196919550909350505050565b6000806020838503121561330457600080fd5b82356001600160401b038082111561331b57600080fd5b818501915085601f83011261332f57600080fd5b81358181111561333e57600080fd5b8660208260051b85010111156132df57600080fd5b80356001600160a01b038116811461336a57600080fd5b919050565b6000806040838503121561338257600080fd5b61338b83613353565b946020939093013593505050565b6000602082840312156133ab57600080fd5b6119ce82613353565b634e487b7160e01b600052604160045260246000fd5b604051602081016001600160401b03811182821017156133ec576133ec6133b4565b60405290565b604080519081016001600160401b03811182821017156133ec576133ec6133b4565b604051608081016001600160401b03811182821017156133ec576133ec6133b4565b604051606081016001600160401b03811182821017156133ec576133ec6133b4565b60405161012081016001600160401b03811182821017156133ec576133ec6133b4565b604051601f8201601f191681016001600160401b03811182821017156134a3576134a36133b4565b604052919050565b600082601f8301126134bc57600080fd5b81356001600160401b038111156134d5576134d56133b4565b6134e8601f8201601f191660200161347b565b8181528460208386010111156134fd57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561352d57600080fd5b61353683613353565b915060208301356001600160401b0381111561355157600080fd5b61355d858286016134ab565b9150509250929050565b60005b8381101561358257818101518382015260200161356a565b50506000910152565b600081518084526135a3816020860160208601613567565b601f01601f19169290920160200192915050565b60ff60f81b881681526000602060e060208401526135d860e084018a61358b565b83810360408501526135ea818a61358b565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b8181101561363e57835183529284019291840191600101613622565b50909c9b505050505050505050505050565b60ff8116811461181b57600080fd5b60008060006060848603121561367457600080fd5b61367d84613353565b925061368b60208501613353565b9150604084013561369b81613650565b809150509250925092565b6020815260006119ce602083018461358b565b600080604083850312156136cc57600080fd5b6136d583613353565b91506136e360208401613353565b90509250929050565b6020808252601b908201527f53656e646572206973206e6f7420746865207375626d69747465720000000000604082015260600190565b60208082526025908201527f426174636820696e2070726f67726573732c207375626d6974206f7220726f6c6040820152646c6261636b60d81b606082015260800190565b60006001600160401b03821115613781576137816133b4565b5060051b60200190565b600082601f83011261379c57600080fd5b813560206137b16137ac83613768565b61347b565b828152600592831b85018201928282019190878511156137d057600080fd5b8387015b858110156138a05780356001600160401b03808211156137f45760008081fd5b90890190818b03601f190187131561380c5760008081fd5b6138146133ca565b87830135828111156138265760008081fd5b8084019350508b603f84011261383e57600091508182fd5b87830135915060406138526137ac84613768565b83815292861b8401810192898101908e85111561386f5760008081fd5b948201945b8486101561388d5785358252948a0194908a0190613874565b83525050865250509284019284016137d4565b5090979650505050505050565b600082601f8301126138be57600080fd5b813560206138ce6137ac83613768565b82815260069290921b840181019181810190868411156138ed57600080fd5b8286015b8481101561393d576040818903121561390a5760008081fd5b6139126133f2565b813561ffff811681146139255760008081fd5b815281850135858201528352918301916040016138f1565b509695505050505050565b600082601f83011261395957600080fd5b813560206139696137ac83613768565b82815260059290921b8401810191818101908684111561398857600080fd5b8286015b8481101561393d5780356001600160401b03808211156139ac5760008081fd5b908801906080828b03601f19018113156139c65760008081fd5b6139ce613414565b6139d9888501613353565b8152604080850135848111156139ef5760008081fd5b6139fd8e8b838901016138ad565b8a8401525060608086013585811115613a165760008081fd5b613a248f8c838a01016138ad565b928401929092529490920135938101939093525050835291830191830161398c565b60006020808385031215613a5957600080fd5b82356001600160401b0380821115613a7057600080fd5b9084019060608287031215613a8457600080fd5b613a8c613436565b823582811115613a9b57600080fd5b8301601f81018813613aac57600080fd5b8035613aba6137ac82613768565b81815260059190911b8201860190868101908a831115613ad957600080fd5b928701925b82841015613afe57613aef84613353565b82529287019290870190613ade565b84525050508284013582811115613b1457600080fd5b613b208882860161378b565b85830152506040830135935081841115613b3957600080fd5b613b4587858501613948565b60408201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b8082018281126000831280158216821582161715613b8a57613b8a613257565b505092915050565b600063ffffffff808316818103613bab57613bab613257565b6001019392505050565b8181036000831280158383131683831282161715613bd557613bd5613257565b5092915050565b60008151808452602080850194506020840160005b83811015613c0d57815187529582019590820190600101613bf1565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b60028110613c4c57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b0384168152606060208201819052600090613c7490830185613bdc565b905061219b6040830184613c2e565b8183823760009101908152919050565b60208082526022908201527f4861736820646f6573206e6f74206d61746368207072657061726564206261746040820152610c6d60f31b606082015260800190565b81810381811115611a5857611a58613257565b6001600160a01b038316815260406020820181905260009061219b90830184613bdc565b8082028115828204841417611a5857611a58613257565b6000808335601e19843603018112613d3a57600080fd5b8301803591506001600160401b03821115613d5457600080fd5b602001915036819003821315613d6957600080fd5b9250929050565b63ffffffff828116828216039080821115613bd557613bd5613257565b600063ffffffff821680613da357613da3613257565b6000190192915050565b600060208284031215613dbf57600080fd5b815180151581146119ce57600080fd5b60008085851115613ddf57600080fd5b83861115613dec57600080fd5b5050820193919092039150565b80356001600160401b038116811461336a57600080fd5b600060208284031215613e2257600080fd5b81356001600160401b0380821115613e3957600080fd5b9083019081850360c0811215613e4e57600080fd5b613e56613436565b613e5f84613df9565b81526080601f1983011215613e7357600080fd5b613e7b613414565b9150613e8960208501613353565b8252613e9760408501613353565b602083015260608401356040830152613eb260808501613df9565b606083015281602082015260a0840135915082821115613ed157600080fd5b613b45878386016134ab565b600060208284031215613eef57600080fd5b81356001600160401b0380821115613f0657600080fd5b9083019081850360a0811215613f1b57600080fd5b613f23613436565b613f2c84613df9565b81526060601f1983011215613f4057600080fd5b613f48613436565b9150613f5660208501613353565b825260408401356020830152613f6e60608501613df9565b60408301528160208201526080840135915082821115613ed157600080fd5b600081830360a0811215613fa057600080fd5b613fa86133f2565b91506080811215613fb857600080fd5b50613fc1613414565b613fca83613353565b81526020830135602082015260408301356040820152606083013560608201528082525060808201356001600160401b0381111561400757600080fd5b614013848285016134ab565b60208301525092915050565b60006020828403121561403157600080fd5b81356001600160401b038082111561404857600080fd5b90830190610120828603121561405d57600080fd5b614065613458565b61406e83613df9565b815261407c60208401613353565b602082015261408d60408401613353565b6040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e0830135828111156140cc57600080fd5b6140d887828601613f8d565b60e08301525061010080840135838111156140f257600080fd5b6140fe88828701613f8d565b918301919091525095945050505050565b60008451614121818460208901613567565b8201838582376000930192835250909392505050565b60006020828403121561414957600080fd5b5051919050565b600181811c9082168061416457607f821691505b60208210810361418457634e487b7160e01b600052602260045260246000fd5b50919050565b63ffffffff818116838216019080821115613bd557613bd5613257565b6000600160ff1b82016141bc576141bc613257565b5060000390565b600181815b808511156141fe5781600019048211156141e4576141e4613257565b808516156141f157918102915b93841c93908002906141c8565b509250929050565b60008261421557506001611a58565b8161422257506000611a58565b816001811461423857600281146142425761425e565b6001915050611a58565b60ff84111561425357614253613257565b50506001821b611a58565b5060208310610133831016604e8410600b8410161715614281575081810a611a58565b61428b83836141c3565b806000190482111561429f5761429f613257565b029392505050565b60006119ce60ff841683614206565b80820260008212600160ff1b841416156142d2576142d2613257565b8181058314821517611a5857611a58613257565b60008261430357634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561431d5761431d613257565b500590565b601f8211156116a2576000816000526020600020601f850160051c8101602086101561434b5750805b601f850160051c820191505b8181101561436a57828155600101614357565b505050505050565b81516001600160401b0381111561438b5761438b6133b4565b61439f816143998454614150565b84614322565b602080601f8311600181146143d457600084156143bc5750858301515b600019600386901b1c1916600185901b17855561436a565b600085815260208120601f198616915b82811015614403578886015182559484019460019091019084016143e4565b50858210156144215787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006101808201905060018060a01b038088168352808716602084015285151560408401528085511660608401525060208401516080830152604084015160a0830152606084015160c0830152825160e083015260208301516101008301526040830151610120830152606083015161014083015260808301516101608301529695505050505050565b6001600160401b0383168152604081016119ce6020830184613c2e565b6000602082840312156144ea57600080fd5b81516119ce81613650565b60008251614507818460208701613567565b919091019291505056fe576974686472617728616464726573732073656e6465722c75696e7432353620616d6f756e742c75696e743634206e6f6e636529576974686472617728616464726573732073656e6465722c6164647265737320746f6b656e2c75696e7432353620616d6f756e742c75696e743634206e6f6e636529a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc4f7264657228616464726573732073656e6465722c616464726573732062617365546f6b656e2c616464726573732071756f7465546f6b656e2c696e7432353620616d6f756e742c75696e743235362070726963652c696e74323536206e6f6e636529a264697066735822122065d0443b04ea5819684e9a30a981141f6542bdfc053e25cc62d91b20914922e264736f6c63430008180033";

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_UPGRADE_INTERFACE_VERSION = "UPGRADE_INTERFACE_VERSION";

    public static final String FUNC_BALANCES = "balances";

    public static final String FUNC_BATCHHASH = "batchHash";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FEEACCOUNT = "feeAccount";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PREPAREBATCH = "prepareBatch";

    public static final String FUNC_PREPARESETTLEMENTBATCH = "prepareSettlementBatch";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROLLBACKBATCH = "rollbackBatch";

    public static final String FUNC_SETFEEACCOUNT = "setFeeAccount";

    public static final String FUNC_SETSUBMITTER = "setSubmitter";

    public static final String FUNC_SUBMITBATCH = "submitBatch";

    public static final String FUNC_SUBMITSETTLEMENTBATCH = "submitSettlementBatch";

    public static final String FUNC_SUBMITWITHDRAWALS = "submitWithdrawals";

    public static final String FUNC_SUBMITTER = "submitter";

    public static final String FUNC_TOKENPRECISION = "tokenPrecision";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TXPROCESSEDCOUNT = "txProcessedCount";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event AMOUNTADJUSTED_EVENT = new Event("AmountAdjusted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    ;

    public static final Event ORDERFILLED_EVENT = new Event("OrderFilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Order>() {}, new TypeReference<ExecutionInfo>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PREPARETRANSACTIONFAILED_EVENT = new Event("PrepareTransactionFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event SETTLEMENTCOMPLETED_EVENT = new Event("SettlementCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event SETTLEMENTFAILED_EVENT = new Event("SettlementFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event WITHDRAWAL_EVENT = new Event("Withdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> UPGRADE_INTERFACE_VERSION() {
        final Function function = new Function(FUNC_UPGRADE_INTERFACE_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balances(String param0, String param1) {
        final Function function = new Function(FUNC_BALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> batchHash() {
        final Function function = new Function(FUNC_BATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(String _token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain() {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> feeAccount() {
        final Function function = new Function(FUNC_FEEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getVersion() {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _submitter, String _feeAccount, BigInteger _nativePrecision) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter), 
                new org.web3j.abi.datatypes.Address(160, _feeAccount), 
                new org.web3j.abi.datatypes.generated.Uint8(_nativePrecision)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareBatch(List<byte[]> transactions) {
        final Function function = new Function(
                FUNC_PREPAREBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(transactions, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_PREPARESETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rollbackBatch() {
        final Function function = new Function(
                FUNC_ROLLBACKBATCH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeAccount(String _feeAccount) {
        final Function function = new Function(
                FUNC_SETFEEACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _feeAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSubmitter(String _submitter) {
        final Function function = new Function(
                FUNC_SETSUBMITTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitBatch(List<byte[]> transactions) {
        final Function function = new Function(
                FUNC_SUBMITBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(transactions, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_SUBMITSETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitWithdrawals(List<byte[]> withdrawals) {
        final Function function = new Function(
                FUNC_SUBMITWITHDRAWALS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(withdrawals, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> submitter() {
        final Function function = new Function(FUNC_SUBMITTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenPrecision(String param0) {
        final Function function = new Function(FUNC_TOKENPRECISION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> txProcessedCount() {
        final Function function = new Function(FUNC_TXPROCESSEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public static List<AmountAdjustedEventResponse> getAmountAdjustedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AMOUNTADJUSTED_EVENT, transactionReceipt);
        ArrayList<AmountAdjustedEventResponse> responses = new ArrayList<AmountAdjustedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AmountAdjustedEventResponse typedResponse = new AmountAdjustedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.requested = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.actual = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AmountAdjustedEventResponse getAmountAdjustedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AMOUNTADJUSTED_EVENT, log);
        AmountAdjustedEventResponse typedResponse = new AmountAdjustedEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.requested = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.actual = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<AmountAdjustedEventResponse> amountAdjustedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAmountAdjustedEventFromLog(log));
    }

    public Flowable<AmountAdjustedEventResponse> amountAdjustedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AMOUNTADJUSTED_EVENT));
        return amountAdjustedEventFlowable(filter);
    }

    public static List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DepositEventResponse getDepositEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEPOSIT_EVENT, log);
        DepositEventResponse typedResponse = new DepositEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDepositEventFromLog(log));
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<OrderFilledEventResponse> getOrderFilledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ORDERFILLED_EVENT, transactionReceipt);
        ArrayList<OrderFilledEventResponse> responses = new ArrayList<OrderFilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OrderFilledEventResponse typedResponse = new OrderFilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.digest = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.baseToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.quoteToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.isTaker = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.order = (Order) eventValues.getNonIndexedValues().get(3);
            typedResponse.executionInfo = (ExecutionInfo) eventValues.getNonIndexedValues().get(4);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OrderFilledEventResponse getOrderFilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ORDERFILLED_EVENT, log);
        OrderFilledEventResponse typedResponse = new OrderFilledEventResponse();
        typedResponse.log = log;
        typedResponse.digest = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.baseToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.quoteToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.isTaker = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.order = (Order) eventValues.getNonIndexedValues().get(3);
        typedResponse.executionInfo = (ExecutionInfo) eventValues.getNonIndexedValues().get(4);
        return typedResponse;
    }

    public Flowable<OrderFilledEventResponse> orderFilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOrderFilledEventFromLog(log));
    }

    public Flowable<OrderFilledEventResponse> orderFilledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERFILLED_EVENT));
        return orderFilledEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PrepareTransactionFailedEventResponse> getPrepareTransactionFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PREPARETRANSACTIONFAILED_EVENT, transactionReceipt);
        ArrayList<PrepareTransactionFailedEventResponse> responses = new ArrayList<PrepareTransactionFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PrepareTransactionFailedEventResponse typedResponse = new PrepareTransactionFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PrepareTransactionFailedEventResponse getPrepareTransactionFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PREPARETRANSACTIONFAILED_EVENT, log);
        PrepareTransactionFailedEventResponse typedResponse = new PrepareTransactionFailedEventResponse();
        typedResponse.log = log;
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<PrepareTransactionFailedEventResponse> prepareTransactionFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPrepareTransactionFailedEventFromLog(log));
    }

    public Flowable<PrepareTransactionFailedEventResponse> prepareTransactionFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PREPARETRANSACTIONFAILED_EVENT));
        return prepareTransactionFailedEventFlowable(filter);
    }

    public static List<SettlementCompletedEventResponse> getSettlementCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, transactionReceipt);
        ArrayList<SettlementCompletedEventResponse> responses = new ArrayList<SettlementCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementCompletedEventResponse getSettlementCompletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, log);
        SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementCompletedEventFromLog(log));
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTCOMPLETED_EVENT));
        return settlementCompletedEventFlowable(filter);
    }

    public static List<SettlementFailedEventResponse> getSettlementFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, transactionReceipt);
        ArrayList<SettlementFailedEventResponse> responses = new ArrayList<SettlementFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementFailedEventResponse getSettlementFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, log);
        SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementFailedEventFromLog(log));
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTFAILED_EVENT));
        return settlementFailedEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalEventResponse getWithdrawalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, log);
        WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalEventFromLog(log));
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Order extends StaticStruct {
        public String sender;

        public BigInteger amount;

        public BigInteger price;

        public BigInteger nonce;

        public Order(String sender, BigInteger amount, BigInteger price, BigInteger nonce) {
            super(new org.web3j.abi.datatypes.Address(160, sender), 
                    new org.web3j.abi.datatypes.generated.Int256(amount), 
                    new org.web3j.abi.datatypes.generated.Uint256(price), 
                    new org.web3j.abi.datatypes.generated.Uint256(nonce));
            this.sender = sender;
            this.amount = amount;
            this.price = price;
            this.nonce = nonce;
        }

        public Order(Address sender, Int256 amount, Uint256 price, Uint256 nonce) {
            super(sender, amount, price, nonce);
            this.sender = sender.getValue();
            this.amount = amount.getValue();
            this.price = price.getValue();
            this.nonce = nonce.getValue();
        }
    }

    public static class ExecutionInfo extends StaticStruct {
        public BigInteger filledAmount;

        public BigInteger executionPrice;

        public BigInteger fee;

        public BigInteger baseAdjustment;

        public BigInteger quoteAdjustment;

        public ExecutionInfo(BigInteger filledAmount, BigInteger executionPrice, BigInteger fee, BigInteger baseAdjustment, BigInteger quoteAdjustment) {
            super(new org.web3j.abi.datatypes.generated.Int256(filledAmount), 
                    new org.web3j.abi.datatypes.generated.Uint256(executionPrice), 
                    new org.web3j.abi.datatypes.generated.Uint256(fee), 
                    new org.web3j.abi.datatypes.generated.Int256(baseAdjustment), 
                    new org.web3j.abi.datatypes.generated.Int256(quoteAdjustment));
            this.filledAmount = filledAmount;
            this.executionPrice = executionPrice;
            this.fee = fee;
            this.baseAdjustment = baseAdjustment;
            this.quoteAdjustment = quoteAdjustment;
        }

        public ExecutionInfo(Int256 filledAmount, Uint256 executionPrice, Uint256 fee, Int256 baseAdjustment, Int256 quoteAdjustment) {
            super(filledAmount, executionPrice, fee, baseAdjustment, quoteAdjustment);
            this.filledAmount = filledAmount.getValue();
            this.executionPrice = executionPrice.getValue();
            this.fee = fee.getValue();
            this.baseAdjustment = baseAdjustment.getValue();
            this.quoteAdjustment = quoteAdjustment.getValue();
        }
    }

    public static class AmountAdjustedEventResponse extends BaseEventResponse {
        public String sender;

        public String token;

        public BigInteger requested;

        public BigInteger actual;
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String from;

        public String token;

        public BigInteger amount;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class OrderFilledEventResponse extends BaseEventResponse {
        public byte[] digest;

        public String sender;

        public String baseToken;

        public String quoteToken;

        public Boolean isTaker;

        public Order order;

        public ExecutionInfo executionInfo;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PrepareTransactionFailedEventResponse extends BaseEventResponse {
        public BigInteger sequence;

        public BigInteger errorCode;
    }

    public static class SettlementCompletedEventResponse extends BaseEventResponse {
        public String _address;

        public List<byte[]> tradeHashes;
    }

    public static class SettlementFailedEventResponse extends BaseEventResponse {
        public String _address;

        public List<byte[]> tradeHashes;

        public BigInteger errorCode;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public String to;

        public String token;

        public BigInteger amount;
    }
}
