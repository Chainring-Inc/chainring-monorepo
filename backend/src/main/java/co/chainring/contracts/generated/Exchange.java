package co.chainring.contracts.generated;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class Exchange extends Contract {
    public static final String BINARY = "60a06040523060805234801561001457600080fd5b50608051612c2d61003e60003960008181610e2601528181610e4f0152610f900152612c2d6000f3fe6080604052600436106101395760003560e01c806384b0196e116100ab57806395ad89e61161006f57806395ad89e6146103e6578063ad3cb1cc14610413578063c187bdf014610451578063c23f001f14610467578063f2fde38b1461049c578063f3fef3a3146104bc57600080fd5b806384b0196e146102ff57806389232a00146103275780638da5cb5b146103475780638dc45d9a1461038457806395880b40146103a457600080fd5b80634b023cf8116100fd5780634b023cf81461024a5780634f1ef2861461026a57806352d1902d1461027d5780635a91f7431461029257806365e17c9d146102b2578063715018a6146102ea57600080fd5b80630d8e6e2c146101a45780631f186b27146101c55780632e1a7d4d146101e75780633644e5151461020757806347e7ef241461022a57600080fd5b3661019f57336000908152600160205260408120805434929061015d908490611f57565b9091555050604080516000815234602082015233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2005b600080fd5b3480156101b057600080fd5b50604051600181526020015b60405180910390f35b3480156101d157600080fd5b506101e56101e0366004611f6a565b6104dc565b005b3480156101f357600080fd5b506101e5610202366004611fde565b6105a4565b34801561021357600080fd5b5061021c6105b1565b6040519081526020016101bc565b34801561023657600080fd5b506101e5610245366004612013565b6105c0565b34801561025657600080fd5b506101e561026536600461203d565b6106b9565b6101e5610278366004612189565b61072f565b34801561028957600080fd5b5061021c61074e565b34801561029e57600080fd5b506101e56102ad36600461203d565b61076b565b3480156102be57600080fd5b506005546102d2906001600160a01b031681565b6040516001600160a01b0390911681526020016101bc565b3480156102f657600080fd5b506101e56107e1565b34801561030b57600080fd5b506103146107f5565b6040516101bc9796959493929190612226565b34801561033357600080fd5b506101e56103423660046122ce565b6108a1565b34801561035357600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102d2565b34801561039057600080fd5b506004546102d2906001600160a01b031681565b3480156103b057600080fd5b506103d46103bf36600461203d565b60066020526000908152604090205460ff1681565b60405160ff90911681526020016101bc565b3480156103f257600080fd5b5061021c61040136600461203d565b60016020526000908152604090205481565b34801561041f57600080fd5b50610444604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101bc9190612315565b34801561045d57600080fd5b5061021c60035481565b34801561047357600080fd5b5061021c610482366004612328565b600060208181529281526040808220909352908152205481565b3480156104a857600080fd5b506101e56104b736600461203d565b610a6f565b3480156104c857600080fd5b506101e56104d7366004612013565b610aaa565b6004546001600160a01b0316331461053b5760405162461bcd60e51b815260206004820152601b60248201527f53656e646572206973206e6f7420746865207375626d6974746572000000000060448201526064015b60405180910390fd5b60005b818110156105855736600084848481811061055b5761055b61235b565b905060200281019061056d9190612371565b9150915061057b8282610ab5565b505060010161053e565b50818190506003600082825461059b9190611f57565b90915550505050565b6105ae3382610cef565b50565b60006105bb610db6565b905090565b6040516323b872dd60e01b81523360048201523060248201526044810182905282906001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610615573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063991906123be565b50336000908152602081815260408083206001600160a01b03871684529091528120805484929061066b908490611f57565b9091555050604080516001600160a01b03851681526020810184905233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2505050565b6106c1610dc0565b6001600160a01b03811661070d5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610532565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b610737610e1b565b61074082610ec0565b61074a8282610ec8565b5050565b6000610758610f85565b50600080516020612b7583398151915290565b610773610dc0565b6001600160a01b0381166107bf5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b6044820152606401610532565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6107e9610dc0565b6107f36000610fce565b565b60006060808280808381600080516020612b55833981519152805490915015801561082257506001810154155b6108665760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610532565b61086e61103f565b610876611102565b60408051600080825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156108e65750825b90506000826001600160401b031660011480156109025750303b155b905081158015610910575080155b1561092e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561095857845460ff60401b1916600160401b1785555b61096133611141565b610969611152565b6109b66040518060400160405280600e81526020016d436861696e52696e67204c61627360901b81525060405180604001604052806005815260200164302e302e3160d81b81525061115a565b600480546001600160a01b03808b166001600160a01b03199283161790925560058054928a16929091169190911790556000805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8805460ff881660ff199091161790558315610a6557845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b610a77610dc0565b6001600160a01b038116610aa157604051631e4fbdf760e01b815260006004820152602401610532565b6105ae81610fce565b61074a33838361116c565b600082826000818110610aca57610aca61235b565b919091013560f81c90506002811115610ae557610ae56123e0565b90506000816002811115610afb57610afb6123e0565b03610be4576000610b0f83600181876123f6565b810190610b1c9190612437565b90506000610bae604051806080016040528060428152602001612b1360429139805160209182012084518051818401516040808401516060948501518251978801969096526001600160a01b039384169187019190915291169184019190915260808301526001600160401b031660a082015260c0015b60405160208183030381529060405280519060200120611283565b8251516020840151919250610bc49183906112b6565b815180516020820151604090920151610bdd929061116c565b5050505050565b6001816002811115610bf857610bf86123e0565b03610caf576000610c0c83600181876123f6565b810190610c1991906124fd565b90506000610c85604051806060016040528060348152602001612adf60349139805160209182012084518051818401516040928301518351958601949094526001600160a01b039091169184019190915260608301526001600160401b0316608082015260a001610b93565b8251516020840151919250610c9b9183906112b6565b81518051602090910151610bdd9190610cef565b6002816002811115610cc357610cc36123e0565b03610cea57610cea610cd883600181876123f6565b810190610ce59190612629565b61131f565b505050565b6001600160a01b03821660009081526001602052604081205490829003610d14578091505b6000610d2884610d2385612704565b6115a6565b610d3190612704565b6040519091506001600160a01b0385169082156108fc029083906000818181858888f19350505050158015610d6a573d6000803e3d6000fd5b506040805160008152602081018390526001600160a01b038616917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a250505050565b60006105bb6116d8565b33610df27f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146107f35760405163118cdaa760e01b8152336004820152602401610532565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610ea257507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e96600080516020612b75833981519152546001600160a01b031690565b6001600160a01b031614155b156107f35760405163703e46dd60e11b815260040160405180910390fd5b6105ae610dc0565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610f22575060408051601f3d908101601f19168201909252610f1f91810190612720565b60015b610f4a57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610532565b600080516020612b758339815191528114610f7b57604051632a87526960e21b815260048101829052602401610532565b610cea838361174c565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107f35760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1028054606091600080516020612b558339815191529161107e90612739565b80601f01602080910402602001604051908101604052809291908181526020018280546110aa90612739565b80156110f75780601f106110cc576101008083540402835291602001916110f7565b820191906000526020600020905b8154815290600101906020018083116110da57829003601f168201915b505050505091505090565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1038054606091600080516020612b558339815191529161107e90612739565b6111496117a2565b6105ae816117eb565b6107f36117a2565b6111626117a2565b61074a82826117f3565b6001600160a01b038084166000908152602081815260408083209386168352929052908120549082900361119e578091505b60006111b385856111ae86612704565b611854565b6111bc90612704565b60405163a9059cbb60e01b81526001600160a01b03878116600483015260248201839052919250859182169063a9059cbb906044016020604051808303816000875af1158015611210573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123491906123be565b50604080516001600160a01b038781168252602082018590528816917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a2505050505050565b60006112b0611290610db6565b8360405161190160f01b8152600281019290925260228201526042902090565b92915050565b60006112c283836119e3565b9050836001600160a01b0316816001600160a01b0316146113195760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964205369676e617475726560781b6044820152606401610532565b50505050565b6000611338826000015183602001518460c00151611a0d565b90506000611353836000015184602001518560e00151611a0d565b604084015184519192509060009061136a90611a96565b61137590600a612857565b856060015186604001516113899190612866565b6113939190612896565b60c0860151515186519192506113a99184611854565b5060e0850151515185516113c191906111ae85612704565b5060008560800151826113d390612704565b6113dd91906128d2565b905060008660a00151836113f191906128d2565b60c08801515151602089015191925061140a9184611854565b5060e087015151516020880151611422919083611854565b5060008760a0015188608001516114399190611f57565b111561146b57600554602088015160a089015160808a0151611469936001600160a01b031692916111ae91611f57565b505b8660c0015160000151600001516001600160a01b0316867fde6f615025abb6ad968087d53a6f48315fcec5ff80719963a7122f92d3ccfee889600001518a6020015160018c60c00151600001516040518060a001604052808c81526020018f6060015181526020018f6080015181526020018c81526020018a8152506040516114f89594939291906128f9565b60405180910390a360e0870151518051885160208a01516040805160a081019091526001600160a01b039093169389937fde6f615025abb6ad968087d53a6f48315fcec5ff80719963a7122f92d3ccfee8939291600091806115598d612704565b81526020018f6060015181526020018f60a0015181526020018c61157c90612704565b81526020018990526040516115959594939291906128f9565b60405180910390a350505050505050565b6000808212156116a2576001600160a01b038316600090815260016020526040812054906115d384612704565b90508181111561166a576040805160008152602081018390529081018390526001600160a01b038616907fd03c7671e7c0af50b023090b014797cc5cb6464510f9c483945ab64f6f63cc079060600160405180910390a26001600160a01b03851660009081526001602052604081208054849290611652908490612983565b90915550611661905082612704565b925050506112b0565b6001600160a01b03851660009081526001602052604081208054839290611692908490612983565b909155508493506112b092505050565b6001600160a01b038316600090815260016020526040812080548492906116ca908490611f57565b909155508291506112b09050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611703611b48565b61170b611bb2565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b61175582611bf6565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561179a57610cea8282611c5b565b61074a611cc8565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166107f357604051631afcd79f60e31b815260040160405180910390fd5b610a776117a2565b6117fb6117a2565b600080516020612b558339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10261183584826129e6565b506003810161184483826129e6565b5060008082556001909101555050565b60006001600160a01b0383166118755761186e84836115a6565b90506119dc565b6000821215611999576001600160a01b03808516600090815260208181526040808320938716835292905290812054906118ae84612704565b90508181111561195457604080516001600160a01b03878116825260208201849052918101849052908716907fd03c7671e7c0af50b023090b014797cc5cb6464510f9c483945ab64f6f63cc079060600160405180910390a26001600160a01b038087166000908152602081815260408083209389168352929052908120805484929061193c908490612983565b9091555061194b905082612704565b925050506119dc565b6001600160a01b0380871660009081526020818152604080832093891683529290529081208054839290611989908490612983565b909155508493506119dc92505050565b6001600160a01b03808516600090815260208181526040808320938716835292905290812080548492906119ce908490611f57565b909155508291506119dc9050565b9392505050565b6000806000806119f38686611ce7565b925092509250611a038282611d34565b5090949350505050565b600080611a8d6040518060a0016040528060638152602001612b9560639139805160209182012085518051818401516040808401516060948501518251978801969096526001600160a01b0393841691870191909152828c1693860193909352908916608085015260a084015260c083015260e082015261010001610b93565b95945050505050565b6001600160a01b03811660009081526006602052604081205460ff168082036112b057826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1b9190612aa5565b6001600160a01b0384166000908152600660205260409020805460ff191660ff8316179055905092915050565b6000600080516020612b5583398151915281611b6261103f565b805190915015611b7a57805160209091012092915050565b81548015611b89579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b6000600080516020612b5583398151915281611bcc611102565b805190915015611be457805160209091012092915050565b60018201548015611b89579392505050565b806001600160a01b03163b600003611c2c57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610532565b600080516020612b7583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611c789190612ac2565b600060405180830381855af49150503d8060008114611cb3576040519150601f19603f3d011682016040523d82523d6000602084013e611cb8565b606091505b5091509150611a8d858383611ded565b34156107f35760405163b398979f60e01b815260040160405180910390fd5b60008060008351604103611d215760208401516040850151606086015160001a611d1388828585611e49565b955095509550505050611d2d565b50508151600091506002905b9250925092565b6000826003811115611d4857611d486123e0565b03611d51575050565b6001826003811115611d6557611d656123e0565b03611d835760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611d9757611d976123e0565b03611db85760405163fce698f760e01b815260048101829052602401610532565b6003826003811115611dcc57611dcc6123e0565b0361074a576040516335e2f38360e21b815260048101829052602401610532565b606082611e0257611dfd82611f18565b6119dc565b8151158015611e1957506001600160a01b0384163b155b15611e4257604051639996b31560e01b81526001600160a01b0385166004820152602401610532565b50806119dc565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611e845750600091506003905082611f0e565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611ed8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611f0457506000925060019150829050611f0e565b9250600091508190505b9450945094915050565b805115611f285780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156112b0576112b0611f41565b60008060208385031215611f7d57600080fd5b82356001600160401b0380821115611f9457600080fd5b818501915085601f830112611fa857600080fd5b813581811115611fb757600080fd5b8660208260051b8501011115611fcc57600080fd5b60209290920196919550909350505050565b600060208284031215611ff057600080fd5b5035919050565b80356001600160a01b038116811461200e57600080fd5b919050565b6000806040838503121561202657600080fd5b61202f83611ff7565b946020939093013593505050565b60006020828403121561204f57600080fd5b6119dc82611ff7565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561209057612090612058565b60405290565b604051608081016001600160401b038111828210171561209057612090612058565b604051606081016001600160401b038111828210171561209057612090612058565b60405161010081016001600160401b038111828210171561209057612090612058565b600082601f83011261210e57600080fd5b81356001600160401b038082111561212857612128612058565b604051601f8301601f19908116603f0116810190828211818310171561215057612150612058565b8160405283815286602085880101111561216957600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561219c57600080fd5b6121a583611ff7565b915060208301356001600160401b038111156121c057600080fd5b6121cc858286016120fd565b9150509250929050565b60005b838110156121f15781810151838201526020016121d9565b50506000910152565b600081518084526122128160208601602086016121d6565b601f01601f19169290920160200192915050565b60ff60f81b881681526000602060e0602084015261224760e084018a6121fa565b8381036040850152612259818a6121fa565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b818110156122ad57835183529284019291840191600101612291565b50909c9b505050505050505050505050565b60ff811681146105ae57600080fd5b6000806000606084860312156122e357600080fd5b6122ec84611ff7565b92506122fa60208501611ff7565b9150604084013561230a816122bf565b809150509250925092565b6020815260006119dc60208301846121fa565b6000806040838503121561233b57600080fd5b61234483611ff7565b915061235260208401611ff7565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261238857600080fd5b8301803591506001600160401b038211156123a257600080fd5b6020019150368190038213156123b757600080fd5b9250929050565b6000602082840312156123d057600080fd5b815180151581146119dc57600080fd5b634e487b7160e01b600052602160045260246000fd5b6000808585111561240657600080fd5b8386111561241357600080fd5b5050820193919092039150565b80356001600160401b038116811461200e57600080fd5b60006020828403121561244957600080fd5b81356001600160401b038082111561246057600080fd5b9083019081850360a081121561247557600080fd5b61247d61206e565b608082121561248b57600080fd5b612493612096565b915061249e84611ff7565b82526124ac60208501611ff7565b6020830152604084013560408301526124c760608501612420565b6060830152908152608083013590828211156124e257600080fd5b6124ee878386016120fd565b60208201529695505050505050565b60006020828403121561250f57600080fd5b81356001600160401b038082111561252657600080fd5b90830190818503608081121561253b57600080fd5b61254361206e565b606082121561255157600080fd5b6125596120b8565b915061256484611ff7565b82526020840135602083015261257c60408501612420565b6040830152908152606083013590828211156124e257600080fd5b600081830360a08112156125aa57600080fd5b6125b261206e565b915060808112156125c257600080fd5b506125cb612096565b6125d483611ff7565b81526020830135602082015260408301356040820152606083013560608201528082525060808201356001600160401b0381111561261157600080fd5b61261d848285016120fd565b60208301525092915050565b60006020828403121561263b57600080fd5b81356001600160401b038082111561265257600080fd5b90830190610100828603121561266757600080fd5b61266f6120da565b61267883611ff7565b815261268660208401611ff7565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c0830135828111156126c557600080fd5b6126d187828601612597565b60c08301525060e0830135828111156126e957600080fd5b6126f587828601612597565b60e08301525095945050505050565b6000600160ff1b820161271957612719611f41565b5060000390565b60006020828403121561273257600080fd5b5051919050565b600181811c9082168061274d57607f821691505b60208210810361276d57634e487b7160e01b600052602260045260246000fd5b50919050565b600181815b808511156127ae57816000190482111561279457612794611f41565b808516156127a157918102915b93841c9390800290612778565b509250929050565b6000826127c5575060016112b0565b816127d2575060006112b0565b81600181146127e857600281146127f25761280e565b60019150506112b0565b60ff84111561280357612803611f41565b50506001821b6112b0565b5060208310610133831016604e8410600b8410161715612831575081810a6112b0565b61283b8383612773565b806000190482111561284f5761284f611f41565b029392505050565b60006119dc60ff8416836127b6565b80820260008212600160ff1b8414161561288257612882611f41565b81810583148215176112b0576112b0611f41565b6000826128b357634e487b7160e01b600052601260045260246000fd5b600160ff1b8214600019841416156128cd576128cd611f41565b500590565b81810360008312801583831316838312821617156128f2576128f2611f41565b5092915050565b60006101808201905060018060a01b038088168352808716602084015285151560408401528085511660608401525060208401516080830152604084015160a0830152606084015160c0830152825160e083015260208301516101008301526040830151610120830152606083015161014083015260808301516101608301529695505050505050565b818103818111156112b0576112b0611f41565b601f821115610cea576000816000526020600020601f850160051c810160208610156129bf5750805b601f850160051c820191505b818110156129de578281556001016129cb565b505050505050565b81516001600160401b038111156129ff576129ff612058565b612a1381612a0d8454612739565b84612996565b602080601f831160018114612a485760008415612a305750858301515b600019600386901b1c1916600185901b1785556129de565b600085815260208120601f198616915b82811015612a7757888601518255948401946001909101908401612a58565b5085821015612a955787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215612ab757600080fd5b81516119dc816122bf565b60008251612ad48184602087016121d6565b919091019291505056fe576974686472617728616464726573732073656e6465722c75696e7432353620616d6f756e742c75696e743634206e6f6e636529576974686472617728616464726573732073656e6465722c6164647265737320746f6b656e2c75696e7432353620616d6f756e742c75696e743634206e6f6e636529a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc4f7264657228616464726573732073656e6465722c616464726573732062617365546f6b656e2c616464726573732071756f7465546f6b656e2c696e7432353620616d6f756e742c75696e743235362070726963652c696e74323536206e6f6e636529a2646970667358221220a274cd7162c860db98011d7a70e101cd0fbfbe68a368ca6be0b197c58c2a0bed64736f6c63430008180033";

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_UPGRADE_INTERFACE_VERSION = "UPGRADE_INTERFACE_VERSION";

    public static final String FUNC_BALANCES = "balances";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FEEACCOUNT = "feeAccount";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_NATIVEBALANCES = "nativeBalances";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETFEEACCOUNT = "setFeeAccount";

    public static final String FUNC_SETSUBMITTER = "setSubmitter";

    public static final String FUNC_SUBMITTRANSACTIONS = "submitTransactions";

    public static final String FUNC_SUBMITTER = "submitter";

    public static final String FUNC_TOKENPRECISION = "tokenPrecision";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TXPROCESSEDCOUNT = "txProcessedCount";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final String FUNC_withdraw = "withdraw";

    public static final Event AMOUNTADJUSTED_EVENT = new Event("AmountAdjusted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    ;

    public static final Event ORDERFILLED_EVENT = new Event("OrderFilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Order>() {}, new TypeReference<ExecutionInfo>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event WITHDRAWAL_EVENT = new Event("Withdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> UPGRADE_INTERFACE_VERSION() {
        final Function function = new Function(FUNC_UPGRADE_INTERFACE_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balances(String param0, String param1) {
        final Function function = new Function(FUNC_BALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(String _token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain() {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> feeAccount() {
        final Function function = new Function(FUNC_FEEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getVersion() {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _submitter, String _feeAccount, BigInteger _nativePrecision) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter), 
                new org.web3j.abi.datatypes.Address(160, _feeAccount), 
                new org.web3j.abi.datatypes.generated.Uint8(_nativePrecision)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> nativeBalances(String param0) {
        final Function function = new Function(FUNC_NATIVEBALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeAccount(String _feeAccount) {
        final Function function = new Function(
                FUNC_SETFEEACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _feeAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSubmitter(String _submitter) {
        final Function function = new Function(
                FUNC_SETSUBMITTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitTransactions(List<byte[]> transactions) {
        final Function function = new Function(
                FUNC_SUBMITTRANSACTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(transactions, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> submitter() {
        final Function function = new Function(FUNC_SUBMITTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenPrecision(String param0) {
        final Function function = new Function(FUNC_TOKENPRECISION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> txProcessedCount() {
        final Function function = new Function(FUNC_TXPROCESSEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger _amount) {
        final Function function = new Function(
                FUNC_withdraw, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(String _token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_withdraw, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<AmountAdjustedEventResponse> getAmountAdjustedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(AMOUNTADJUSTED_EVENT, transactionReceipt);
        ArrayList<AmountAdjustedEventResponse> responses = new ArrayList<AmountAdjustedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AmountAdjustedEventResponse typedResponse = new AmountAdjustedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.requested = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.actual = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AmountAdjustedEventResponse getAmountAdjustedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(AMOUNTADJUSTED_EVENT, log);
        AmountAdjustedEventResponse typedResponse = new AmountAdjustedEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.requested = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.actual = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<AmountAdjustedEventResponse> amountAdjustedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAmountAdjustedEventFromLog(log));
    }

    public Flowable<AmountAdjustedEventResponse> amountAdjustedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AMOUNTADJUSTED_EVENT));
        return amountAdjustedEventFlowable(filter);
    }

    public static List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DepositEventResponse getDepositEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEPOSIT_EVENT, log);
        DepositEventResponse typedResponse = new DepositEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDepositEventFromLog(log));
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<OrderFilledEventResponse> getOrderFilledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ORDERFILLED_EVENT, transactionReceipt);
        ArrayList<OrderFilledEventResponse> responses = new ArrayList<OrderFilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OrderFilledEventResponse typedResponse = new OrderFilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.digest = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.baseToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.quoteToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.isTaker = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.order = (Order) eventValues.getNonIndexedValues().get(3);
            typedResponse.executionInfo = (ExecutionInfo) eventValues.getNonIndexedValues().get(4);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OrderFilledEventResponse getOrderFilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ORDERFILLED_EVENT, log);
        OrderFilledEventResponse typedResponse = new OrderFilledEventResponse();
        typedResponse.log = log;
        typedResponse.digest = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.baseToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.quoteToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.isTaker = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.order = (Order) eventValues.getNonIndexedValues().get(3);
        typedResponse.executionInfo = (ExecutionInfo) eventValues.getNonIndexedValues().get(4);
        return typedResponse;
    }

    public Flowable<OrderFilledEventResponse> orderFilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOrderFilledEventFromLog(log));
    }

    public Flowable<OrderFilledEventResponse> orderFilledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERFILLED_EVENT));
        return orderFilledEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalEventResponse getWithdrawalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, log);
        WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalEventFromLog(log));
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Order extends StaticStruct {
        public String sender;

        public BigInteger amount;

        public BigInteger price;

        public BigInteger nonce;

        public Order(String sender, BigInteger amount, BigInteger price, BigInteger nonce) {
            super(new org.web3j.abi.datatypes.Address(160, sender), 
                    new org.web3j.abi.datatypes.generated.Int256(amount), 
                    new org.web3j.abi.datatypes.generated.Uint256(price), 
                    new org.web3j.abi.datatypes.generated.Uint256(nonce));
            this.sender = sender;
            this.amount = amount;
            this.price = price;
            this.nonce = nonce;
        }

        public Order(Address sender, Int256 amount, Uint256 price, Uint256 nonce) {
            super(sender, amount, price, nonce);
            this.sender = sender.getValue();
            this.amount = amount.getValue();
            this.price = price.getValue();
            this.nonce = nonce.getValue();
        }
    }

    public static class ExecutionInfo extends StaticStruct {
        public BigInteger filledAmount;

        public BigInteger executionPrice;

        public BigInteger fee;

        public BigInteger baseAdjustment;

        public BigInteger quoteAdjustment;

        public ExecutionInfo(BigInteger filledAmount, BigInteger executionPrice, BigInteger fee, BigInteger baseAdjustment, BigInteger quoteAdjustment) {
            super(new org.web3j.abi.datatypes.generated.Int256(filledAmount), 
                    new org.web3j.abi.datatypes.generated.Uint256(executionPrice), 
                    new org.web3j.abi.datatypes.generated.Uint256(fee), 
                    new org.web3j.abi.datatypes.generated.Int256(baseAdjustment), 
                    new org.web3j.abi.datatypes.generated.Int256(quoteAdjustment));
            this.filledAmount = filledAmount;
            this.executionPrice = executionPrice;
            this.fee = fee;
            this.baseAdjustment = baseAdjustment;
            this.quoteAdjustment = quoteAdjustment;
        }

        public ExecutionInfo(Int256 filledAmount, Uint256 executionPrice, Uint256 fee, Int256 baseAdjustment, Int256 quoteAdjustment) {
            super(filledAmount, executionPrice, fee, baseAdjustment, quoteAdjustment);
            this.filledAmount = filledAmount.getValue();
            this.executionPrice = executionPrice.getValue();
            this.fee = fee.getValue();
            this.baseAdjustment = baseAdjustment.getValue();
            this.quoteAdjustment = quoteAdjustment.getValue();
        }
    }

    public static class AmountAdjustedEventResponse extends BaseEventResponse {
        public String sender;

        public String token;

        public BigInteger requested;

        public BigInteger actual;
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String from;

        public String token;

        public BigInteger amount;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class OrderFilledEventResponse extends BaseEventResponse {
        public byte[] digest;

        public String sender;

        public String baseToken;

        public String quoteToken;

        public Boolean isTaker;

        public Order order;

        public ExecutionInfo executionInfo;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public String to;

        public String token;

        public BigInteger amount;
    }
}
