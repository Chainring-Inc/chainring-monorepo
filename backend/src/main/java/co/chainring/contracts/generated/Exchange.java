package co.chainring.contracts.generated;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class Exchange extends Contract {
    public static final String BINARY = "60a06040523060805234801561001457600080fd5b50608051612c7661003e60003960008181610e8501528181610eae0152610fef0152612c766000f3fe6080604052600436106101445760003560e01c80637ecebe00116100b657806395ad89e61161006f57806395ad89e614610433578063ad3cb1cc14610460578063c187bdf01461049e578063c23f001f146104b4578063f2fde38b146104e9578063f3fef3a31461050957600080fd5b80637ecebe001461031657806384b0196e1461034c57806389232a00146103745780638da5cb5b146103945780638dc45d9a146103d157806395880b40146103f157600080fd5b80634b023cf8116101085780634b023cf8146102615780634f1ef2861461028157806352d1902d146102945780635a91f743146102a957806365e17c9d146102c9578063715018a61461030157600080fd5b80630d8e6e2c146101af5780631f186b27146101dc5780632e1a7d4d146101fe5780633644e5151461021e57806347e7ef241461024157600080fd5b366101aa573360009081526001602052604081208054349290610168908490611f7a565b9091555050604080516000815234602082015233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2005b600080fd5b3480156101bb57600080fd5b5060015b6040516001600160401b0390911681526020015b60405180910390f35b3480156101e857600080fd5b506101fc6101f7366004611f8d565b610529565b005b34801561020a57600080fd5b506101fc610219366004612001565b6105f1565b34801561022a57600080fd5b506102336105fe565b6040519081526020016101d3565b34801561024d57600080fd5b506101fc61025c366004612036565b61060d565b34801561026d57600080fd5b506101fc61027c366004612060565b610707565b6101fc61028f3660046121ac565b61077d565b3480156102a057600080fd5b5061023361079c565b3480156102b557600080fd5b506101fc6102c4366004612060565b6107b9565b3480156102d557600080fd5b506005546102e9906001600160a01b031681565b6040516001600160a01b0390911681526020016101d3565b34801561030d57600080fd5b506101fc61082f565b34801561032257600080fd5b506101bf610331366004612060565b6002602052600090815260409020546001600160401b031681565b34801561035857600080fd5b50610361610843565b6040516101d39796959493929190612249565b34801561038057600080fd5b506101fc61038f3660046122f1565b6108ef565b3480156103a057600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03166102e9565b3480156103dd57600080fd5b506004546102e9906001600160a01b031681565b3480156103fd57600080fd5b5061042161040c366004612060565b60066020526000908152604090205460ff1681565b60405160ff90911681526020016101d3565b34801561043f57600080fd5b5061023361044e366004612060565b60016020526000908152604090205481565b34801561046c57600080fd5b50610491604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101d39190612338565b3480156104aa57600080fd5b5061023360035481565b3480156104c057600080fd5b506102336104cf36600461234b565b600060208181529281526040808220909352908152205481565b3480156104f557600080fd5b506101fc610504366004612060565b610abd565b34801561051557600080fd5b506101fc610524366004612036565b610af8565b6004546001600160a01b031633146105885760405162461bcd60e51b815260206004820152601b60248201527f53656e646572206973206e6f7420746865207375626d6974746572000000000060448201526064015b60405180910390fd5b60005b818110156105d2573660008484848181106105a8576105a861237e565b90506020028101906105ba9190612394565b915091506105c88282610b03565b505060010161058b565b5081819050600360008282546105e89190611f7a565b90915550505050565b6105fb3382610d65565b50565b6000610608610e15565b905090565b6040516323b872dd60e01b81523360048201523060248201526044810182905282906001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068691906123e1565b50336000908152602081815260408083206001600160a01b0387168452909152812080548492906106b8908490611f7a565b9091555050604080516001600160a01b03851681526020810184905233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6291015b60405180910390a2505050565b61070f610e1f565b6001600160a01b03811661075b5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b604482015260640161057f565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b610785610e7a565b61078e82610f1f565b6107988282610f27565b5050565b60006107a6610fe4565b50600080516020612bbe83398151915290565b6107c1610e1f565b6001600160a01b03811661080d5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b604482015260640161057f565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610837610e1f565b610841600061102d565b565b60006060808280808381600080516020612b9e833981519152805490915015801561087057506001810154155b6108b45760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b604482015260640161057f565b6108bc61109e565b6108c4611161565b60408051600080825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156109345750825b90506000826001600160401b031660011480156109505750303b155b90508115801561095e575080155b1561097c5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156109a657845460ff60401b1916600160401b1785555b6109af336111a0565b6109b76111b1565b610a046040518060400160405280600e81526020016d436861696e52696e67204c61627360901b81525060405180604001604052806005815260200164302e302e3160d81b8152506111b9565b600480546001600160a01b03808b166001600160a01b03199283161790925560058054928a16929091169190911790556000805260066020527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8805460ff881660ff199091161790558315610ab357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b610ac5610e1f565b6001600160a01b038116610aef57604051631e4fbdf760e01b81526000600482015260240161057f565b6105fb8161102d565b6107983383836111cb565b600082826000818110610b1857610b1861237e565b919091013560f81c90506002811115610b3357610b33612403565b90506000816002811115610b4957610b49612403565b03610c46576000610b5d8360018187612419565b810190610b6a919061245a565b80518051606090910151919250610b80916112d4565b6000610c10604051806080016040528060428152602001612b5c60429139805160209182012084518051818401516040808401516060948501518251978801969096526001600160a01b039384169187019190915291169184019190915260808301526001600160401b031660a082015260c0015b60405160208183030381529060405280519060200120611375565b8251516020840151919250610c269183906113a8565b815180516020820151604090920151610c3f92906111cb565b5050505050565b6001816002811115610c5a57610c5a612403565b03610d25576000610c6e8360018187612419565b810190610c7b9190612520565b80518051604090910151919250610c91916112d4565b6000610cfb604051806060016040528060348152602001612b2860349139805160209182012084518051818401516040928301518351958601949094526001600160a01b039091169184019190915260608301526001600160401b0316608082015260a001610bf5565b8251516020840151919250610d119183906113a8565b81518051602090910151610c3f9190610d65565b6002816002811115610d3957610d39612403565b03610d6057610d60610d4e8360018187612419565b810190610d5b919061264c565b611411565b505050565b6001600160a01b03821660009081526001602052604081205490829003610d8a578091505b610d9c83610d9784612727565b611692565b6040516001600160a01b0384169083156108fc029084906000818181858888f19350505050158015610dd2573d6000803e3d6000fd5b506040805160008152602081018490526001600160a01b038516917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639891016106fa565b6000610608611764565b33610e517f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146108415760405163118cdaa760e01b815233600482015260240161057f565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610f0157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ef5600080516020612bbe833981519152546001600160a01b031690565b6001600160a01b031614155b156108415760405163703e46dd60e11b815260040160405180910390fd5b6105fb610e1f565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610f81575060408051601f3d908101601f19168201909252610f7e91810190612743565b60015b610fa957604051634c9c8ce360e01b81526001600160a01b038316600482015260240161057f565b600080516020612bbe8339815191528114610fda57604051632a87526960e21b81526004810182905260240161057f565b610d6083836117d8565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108415760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1028054606091600080516020612b9e833981519152916110dd9061275c565b80601f01602080910402602001604051908101604052809291908181526020018280546111099061275c565b80156111565780601f1061112b57610100808354040283529160200191611156565b820191906000526020600020905b81548152906001019060200180831161113957829003601f168201915b505050505091505090565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1038054606091600080516020612b9e833981519152916110dd9061275c565b6111a861182e565b6105fb81611877565b61084161182e565b6111c161182e565b610798828261187f565b6001600160a01b03808416600090815260208181526040808320938616835292905290812054908290036111fd578091505b611210848461120b85612727565b6118e0565b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905284919082169063a9059cbb906044016020604051808303816000875af1158015611262573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128691906123e1565b50604080516001600160a01b038681168252602082018690528716917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a25050505050565b6001600160a01b038216600090815260026020526040812080546001600160401b03169161130183612796565b91906101000a8154816001600160401b0302191690836001600160401b031602179055506001600160401b0316816001600160401b0316146107985760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964204e6f6e636560981b604482015260640161057f565b60006113a2611382610e15565b8360405161190160f01b8152600281019290925260228201526042902090565b92915050565b60006113b483836119fb565b9050836001600160a01b0316816001600160a01b03161461140b5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964205369676e617475726560781b604482015260640161057f565b50505050565b600061142a826000015183602001518460c00151611a25565b90506000611445836000015184602001518560e00151611a25565b604084015184519192509060009061145c90611ab0565b61146790600a6128a0565b8560600151866040015161147b91906128af565b61148591906128df565b60c08601515151865191925061149b91846118e0565b60e0850151515185516114b2919061120b85612727565b60008560800151826114c390612727565b6114cd919061291b565b905060008660a00151836114e1919061291b565b60c0880151515160208901519192506114fa91846118e0565b60e0870151515160208801516115119190836118e0565b60008760a0015188608001516115279190611f7a565b111561155757600554602088015160a089015160808a0151611557936001600160a01b0316929161120b91611f7a565b8660c0015160000151600001516001600160a01b0316867fde6f615025abb6ad968087d53a6f48315fcec5ff80719963a7122f92d3ccfee889600001518a6020015160018c60c00151600001516040518060a001604052808c81526020018f6060015181526020018f6080015181526020018c81526020018a8152506040516115e4959493929190612942565b60405180910390a360e0870151518051885160208a01516040805160a081019091526001600160a01b039093169389937fde6f615025abb6ad968087d53a6f48315fcec5ff80719963a7122f92d3ccfee8939291600091806116458d612727565b81526020018f6060015181526020018f60a0015181526020018c61166890612727565b8152602001899052604051611681959493929190612942565b60405180910390a350505050505050565b600081121561173c576001600160a01b038216600090815260016020526040812054906116be83612727565b9050808210156117075760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b604482015260640161057f565b6001600160a01b0384166000908152600160205260408120805483929061172f9084906129cc565b9091555061079892505050565b6001600160a01b038216600090815260016020526040812080548392906105e8908490611f7a565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61178f611b62565b611797611bcc565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6117e182611c10565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a280511561182657610d608282611c75565b610798611ceb565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661084157604051631afcd79f60e31b815260040160405180910390fd5b610ac561182e565b61188761182e565b600080516020612b9e8339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1026118c18482612a2f565b50600381016118d08382612a2f565b5060008082556001909101555050565b6001600160a01b0382166118f857610d608382611692565b60008112156119bc576001600160a01b038084166000908152602081815260408083209386168352929052908120549061193183612727565b90508082101561197a5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b604482015260640161057f565b6001600160a01b03808616600090815260208181526040808320938816835292905290812080548392906119af9084906129cc565b90915550610d6092505050565b6001600160a01b03808416600090815260208181526040808320938616835292905290812080548392906119f1908490611f7a565b9091555050505050565b600080600080611a0b8686611d0a565b925092509250611a1b8282611d57565b5090949350505050565b600080611aa56040518060a0016040528060638152602001612bde60639139805160209182012085518051818401516040808401516060948501518251978801969096526001600160a01b0393841691870191909152828c1693860193909352908916608085015260a084015260c083015260e082015261010001610bf5565b9150505b9392505050565b6001600160a01b03811660009081526006602052604081205460ff168082036113a257826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b359190612aee565b6001600160a01b0384166000908152600660205260409020805460ff191660ff8316179055905092915050565b6000600080516020612b9e83398151915281611b7c61109e565b805190915015611b9457805160209091012092915050565b81548015611ba3579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b6000600080516020612b9e83398151915281611be6611161565b805190915015611bfe57805160209091012092915050565b60018201548015611ba3579392505050565b806001600160a01b03163b600003611c4657604051634c9c8ce360e01b81526001600160a01b038216600482015260240161057f565b600080516020612bbe83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051611c929190612b0b565b600060405180830381855af49150503d8060008114611ccd576040519150601f19603f3d011682016040523d82523d6000602084013e611cd2565b606091505b5091509150611ce2858383611e10565b95945050505050565b34156108415760405163b398979f60e01b815260040160405180910390fd5b60008060008351604103611d445760208401516040850151606086015160001a611d3688828585611e6c565b955095509550505050611d50565b50508151600091506002905b9250925092565b6000826003811115611d6b57611d6b612403565b03611d74575050565b6001826003811115611d8857611d88612403565b03611da65760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611dba57611dba612403565b03611ddb5760405163fce698f760e01b81526004810182905260240161057f565b6003826003811115611def57611def612403565b03610798576040516335e2f38360e21b81526004810182905260240161057f565b606082611e2557611e2082611f3b565b611aa9565b8151158015611e3c57506001600160a01b0384163b155b15611e6557604051639996b31560e01b81526001600160a01b038516600482015260240161057f565b5080611aa9565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611ea75750600091506003905082611f31565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611efb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611f2757506000925060019150829050611f31565b9250600091508190505b9450945094915050565b805115611f4b5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156113a2576113a2611f64565b60008060208385031215611fa057600080fd5b82356001600160401b0380821115611fb757600080fd5b818501915085601f830112611fcb57600080fd5b813581811115611fda57600080fd5b8660208260051b8501011115611fef57600080fd5b60209290920196919550909350505050565b60006020828403121561201357600080fd5b5035919050565b80356001600160a01b038116811461203157600080fd5b919050565b6000806040838503121561204957600080fd5b6120528361201a565b946020939093013593505050565b60006020828403121561207257600080fd5b611aa98261201a565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156120b3576120b361207b565b60405290565b604051608081016001600160401b03811182821017156120b3576120b361207b565b604051606081016001600160401b03811182821017156120b3576120b361207b565b60405161010081016001600160401b03811182821017156120b3576120b361207b565b600082601f83011261213157600080fd5b81356001600160401b038082111561214b5761214b61207b565b604051601f8301601f19908116603f011681019082821181831017156121735761217361207b565b8160405283815286602085880101111561218c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156121bf57600080fd5b6121c88361201a565b915060208301356001600160401b038111156121e357600080fd5b6121ef85828601612120565b9150509250929050565b60005b838110156122145781810151838201526020016121fc565b50506000910152565b600081518084526122358160208601602086016121f9565b601f01601f19169290920160200192915050565b60ff60f81b881681526000602060e0602084015261226a60e084018a61221d565b838103604085015261227c818a61221d565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b818110156122d0578351835292840192918401916001016122b4565b50909c9b505050505050505050505050565b60ff811681146105fb57600080fd5b60008060006060848603121561230657600080fd5b61230f8461201a565b925061231d6020850161201a565b9150604084013561232d816122e2565b809150509250925092565b602081526000611aa9602083018461221d565b6000806040838503121561235e57600080fd5b6123678361201a565b91506123756020840161201a565b90509250929050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126123ab57600080fd5b8301803591506001600160401b038211156123c557600080fd5b6020019150368190038213156123da57600080fd5b9250929050565b6000602082840312156123f357600080fd5b81518015158114611aa957600080fd5b634e487b7160e01b600052602160045260246000fd5b6000808585111561242957600080fd5b8386111561243657600080fd5b5050820193919092039150565b80356001600160401b038116811461203157600080fd5b60006020828403121561246c57600080fd5b81356001600160401b038082111561248357600080fd5b9083019081850360a081121561249857600080fd5b6124a0612091565b60808212156124ae57600080fd5b6124b66120b9565b91506124c18461201a565b82526124cf6020850161201a565b6020830152604084013560408301526124ea60608501612443565b60608301529081526080830135908282111561250557600080fd5b61251187838601612120565b60208201529695505050505050565b60006020828403121561253257600080fd5b81356001600160401b038082111561254957600080fd5b90830190818503608081121561255e57600080fd5b612566612091565b606082121561257457600080fd5b61257c6120db565b91506125878461201a565b82526020840135602083015261259f60408501612443565b60408301529081526060830135908282111561250557600080fd5b600081830360a08112156125cd57600080fd5b6125d5612091565b915060808112156125e557600080fd5b506125ee6120b9565b6125f78361201a565b81526020830135602082015260408301356040820152606083013560608201528082525060808201356001600160401b0381111561263457600080fd5b61264084828501612120565b60208301525092915050565b60006020828403121561265e57600080fd5b81356001600160401b038082111561267557600080fd5b90830190610100828603121561268a57600080fd5b6126926120fd565b61269b8361201a565b81526126a96020840161201a565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c0830135828111156126e857600080fd5b6126f4878286016125ba565b60c08301525060e08301358281111561270c57600080fd5b612718878286016125ba565b60e08301525095945050505050565b6000600160ff1b820161273c5761273c611f64565b5060000390565b60006020828403121561275557600080fd5b5051919050565b600181811c9082168061277057607f821691505b60208210810361279057634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160401b038083168181036127b2576127b2611f64565b6001019392505050565b600181815b808511156127f75781600019048211156127dd576127dd611f64565b808516156127ea57918102915b93841c93908002906127c1565b509250929050565b60008261280e575060016113a2565b8161281b575060006113a2565b8160018114612831576002811461283b57612857565b60019150506113a2565b60ff84111561284c5761284c611f64565b50506001821b6113a2565b5060208310610133831016604e8410600b841016171561287a575081810a6113a2565b61288483836127bc565b806000190482111561289857612898611f64565b029392505050565b6000611aa960ff8416836127ff565b80820260008212600160ff1b841416156128cb576128cb611f64565b81810583148215176113a2576113a2611f64565b6000826128fc57634e487b7160e01b600052601260045260246000fd5b600160ff1b82146000198414161561291657612916611f64565b500590565b818103600083128015838313168383128216171561293b5761293b611f64565b5092915050565b60006101808201905060018060a01b038088168352808716602084015285151560408401528085511660608401525060208401516080830152604084015160a0830152606084015160c0830152825160e083015260208301516101008301526040830151610120830152606083015161014083015260808301516101608301529695505050505050565b818103818111156113a2576113a2611f64565b601f821115610d60576000816000526020600020601f850160051c81016020861015612a085750805b601f850160051c820191505b81811015612a2757828155600101612a14565b505050505050565b81516001600160401b03811115612a4857612a4861207b565b612a5c81612a56845461275c565b846129df565b602080601f831160018114612a915760008415612a795750858301515b600019600386901b1c1916600185901b178555612a27565b600085815260208120601f198616915b82811015612ac057888601518255948401946001909101908401612aa1565b5085821015612ade5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215612b0057600080fd5b8151611aa9816122e2565b60008251612b1d8184602087016121f9565b919091019291505056fe576974686472617728616464726573732073656e6465722c75696e7432353620616d6f756e742c75696e743634206e6f6e636529576974686472617728616464726573732073656e6465722c6164647265737320746f6b656e2c75696e7432353620616d6f756e742c75696e743634206e6f6e636529a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc4f7264657228616464726573732073656e6465722c616464726573732062617365546f6b656e2c616464726573732071756f7465546f6b656e2c696e7432353620616d6f756e742c75696e743235362070726963652c696e74323536206e6f6e636529a2646970667358221220b7f7ade17c70fb7f0d27aa2fbaa35eb09c8db12e00de2da84343f927b58ba2e164736f6c63430008180033";

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_UPGRADE_INTERFACE_VERSION = "UPGRADE_INTERFACE_VERSION";

    public static final String FUNC_BALANCES = "balances";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FEEACCOUNT = "feeAccount";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_NATIVEBALANCES = "nativeBalances";

    public static final String FUNC_NONCES = "nonces";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETFEEACCOUNT = "setFeeAccount";

    public static final String FUNC_SETSUBMITTER = "setSubmitter";

    public static final String FUNC_SUBMITTRANSACTIONS = "submitTransactions";

    public static final String FUNC_SUBMITTER = "submitter";

    public static final String FUNC_TOKENPRECISION = "tokenPrecision";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TXPROCESSEDCOUNT = "txProcessedCount";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final String FUNC_withdraw = "withdraw";

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    ;

    public static final Event ORDERFILLED_EVENT = new Event("OrderFilled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Order>() {}, new TypeReference<ExecutionInfo>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event WITHDRAWAL_EVENT = new Event("Withdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> UPGRADE_INTERFACE_VERSION() {
        final Function function = new Function(FUNC_UPGRADE_INTERFACE_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balances(String param0, String param1) {
        final Function function = new Function(FUNC_BALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(String _token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain() {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> feeAccount() {
        final Function function = new Function(FUNC_FEEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getVersion() {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _submitter, String _feeAccount, BigInteger _nativePrecision) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter), 
                new org.web3j.abi.datatypes.Address(160, _feeAccount), 
                new org.web3j.abi.datatypes.generated.Uint8(_nativePrecision)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> nativeBalances(String param0) {
        final Function function = new Function(FUNC_NATIVEBALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> nonces(String param0) {
        final Function function = new Function(FUNC_NONCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeAccount(String _feeAccount) {
        final Function function = new Function(
                FUNC_SETFEEACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _feeAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSubmitter(String _submitter) {
        final Function function = new Function(
                FUNC_SETSUBMITTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitTransactions(List<byte[]> transactions) {
        final Function function = new Function(
                FUNC_SUBMITTRANSACTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(transactions, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> submitter() {
        final Function function = new Function(FUNC_SUBMITTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenPrecision(String param0) {
        final Function function = new Function(FUNC_TOKENPRECISION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> txProcessedCount() {
        final Function function = new Function(FUNC_TXPROCESSEDCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger _amount) {
        final Function function = new Function(
                FUNC_withdraw, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(String _token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_withdraw, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DepositEventResponse getDepositEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEPOSIT_EVENT, log);
        DepositEventResponse typedResponse = new DepositEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDepositEventFromLog(log));
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<OrderFilledEventResponse> getOrderFilledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ORDERFILLED_EVENT, transactionReceipt);
        ArrayList<OrderFilledEventResponse> responses = new ArrayList<OrderFilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OrderFilledEventResponse typedResponse = new OrderFilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.digest = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.baseToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.quoteToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.isTaker = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.order = (Order) eventValues.getNonIndexedValues().get(3);
            typedResponse.executionInfo = (ExecutionInfo) eventValues.getNonIndexedValues().get(4);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OrderFilledEventResponse getOrderFilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ORDERFILLED_EVENT, log);
        OrderFilledEventResponse typedResponse = new OrderFilledEventResponse();
        typedResponse.log = log;
        typedResponse.digest = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.baseToken = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.quoteToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.isTaker = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.order = (Order) eventValues.getNonIndexedValues().get(3);
        typedResponse.executionInfo = (ExecutionInfo) eventValues.getNonIndexedValues().get(4);
        return typedResponse;
    }

    public Flowable<OrderFilledEventResponse> orderFilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOrderFilledEventFromLog(log));
    }

    public Flowable<OrderFilledEventResponse> orderFilledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERFILLED_EVENT));
        return orderFilledEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalEventResponse getWithdrawalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, log);
        WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalEventFromLog(log));
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Order extends StaticStruct {
        public String sender;

        public BigInteger amount;

        public BigInteger price;

        public BigInteger nonce;

        public Order(String sender, BigInteger amount, BigInteger price, BigInteger nonce) {
            super(new org.web3j.abi.datatypes.Address(160, sender), 
                    new org.web3j.abi.datatypes.generated.Int256(amount), 
                    new org.web3j.abi.datatypes.generated.Uint256(price), 
                    new org.web3j.abi.datatypes.generated.Uint256(nonce));
            this.sender = sender;
            this.amount = amount;
            this.price = price;
            this.nonce = nonce;
        }

        public Order(Address sender, Int256 amount, Uint256 price, Uint256 nonce) {
            super(sender, amount, price, nonce);
            this.sender = sender.getValue();
            this.amount = amount.getValue();
            this.price = price.getValue();
            this.nonce = nonce.getValue();
        }
    }

    public static class ExecutionInfo extends StaticStruct {
        public BigInteger filledAmount;

        public BigInteger executionPrice;

        public BigInteger fee;

        public BigInteger baseAdjustment;

        public BigInteger quoteAdjustment;

        public ExecutionInfo(BigInteger filledAmount, BigInteger executionPrice, BigInteger fee, BigInteger baseAdjustment, BigInteger quoteAdjustment) {
            super(new org.web3j.abi.datatypes.generated.Int256(filledAmount), 
                    new org.web3j.abi.datatypes.generated.Uint256(executionPrice), 
                    new org.web3j.abi.datatypes.generated.Uint256(fee), 
                    new org.web3j.abi.datatypes.generated.Int256(baseAdjustment), 
                    new org.web3j.abi.datatypes.generated.Int256(quoteAdjustment));
            this.filledAmount = filledAmount;
            this.executionPrice = executionPrice;
            this.fee = fee;
            this.baseAdjustment = baseAdjustment;
            this.quoteAdjustment = quoteAdjustment;
        }

        public ExecutionInfo(Int256 filledAmount, Uint256 executionPrice, Uint256 fee, Int256 baseAdjustment, Int256 quoteAdjustment) {
            super(filledAmount, executionPrice, fee, baseAdjustment, quoteAdjustment);
            this.filledAmount = filledAmount.getValue();
            this.executionPrice = executionPrice.getValue();
            this.fee = fee.getValue();
            this.baseAdjustment = baseAdjustment.getValue();
            this.quoteAdjustment = quoteAdjustment.getValue();
        }
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String from;

        public String token;

        public BigInteger amount;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class OrderFilledEventResponse extends BaseEventResponse {
        public byte[] digest;

        public String sender;

        public String baseToken;

        public String quoteToken;

        public Boolean isTaker;

        public Order order;

        public ExecutionInfo executionInfo;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public String to;

        public String token;

        public BigInteger amount;
    }
}
