package co.chainring.contracts.generated;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.2.
 */
@SuppressWarnings("rawtypes")
public class Exchange extends Contract {
    public static final String BINARY = "60a06040523060805234801561001457600080fd5b506080516131e061003e600039600081816116480152818161167101526117b701526131e06000f3fe6080604052600436106101445760003560e01c806365e17c9d116100b6578063ad3cb1cc1161006f578063ad3cb1cc146103ee578063c23f001f1461042c578063d1e32f6714610461578063e791cb2414610476578063ed53f22a1461048c578063f2fde38b146104a257600080fd5b806365e17c9d146102fc578063715018a61461033457806384b0196e146103495780638da5cb5b146103715780638dc45d9a146103ae578063a07581c6146103ce57600080fd5b8063485cc95511610108578063485cc9551461025e5780634a34d4341461027e5780634b023cf8146102945780634f1ef286146102b457806352d1902d146102c75780635a91f743146102dc57600080fd5b80630d8e6e2c146101b857806324a9b806146101d957806330176c86146101fb5780633644e5151461021b57806347e7ef241461023e57600080fd5b366101b3573360009081526020818152604080832083805290915281208054349290610171908490612423565b9091555050604080516000815234602082015233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2005b600080fd5b3480156101c457600080fd5b50604051600181526020015b60405180910390f35b3480156101e557600080fd5b506101f96101f4366004612436565b6104c2565b005b34801561020757600080fd5b506101f9610216366004612436565b61095d565b34801561022757600080fd5b50610230610f0b565b6040519081526020016101d0565b34801561024a57600080fd5b506101f96102593660046124c3565b610f1a565b34801561026a57600080fd5b506101f96102793660046124ed565b611013565b34801561028a57600080fd5b5061023060035481565b3480156102a057600080fd5b506101f96102af366004612520565b6111a7565b6101f96102c23660046126a0565b61121d565b3480156102d357600080fd5b5061023061123c565b3480156102e857600080fd5b506101f96102f7366004612520565b611259565b34801561030857600080fd5b5060025461031c906001600160a01b031681565b6040516001600160a01b0390911681526020016101d0565b34801561034057600080fd5b506101f96112cf565b34801561035557600080fd5b5061035e6112e3565b6040516101d0979695949392919061273d565b34801561037d57600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661031c565b3480156103ba57600080fd5b5060015461031c906001600160a01b031681565b3480156103da57600080fd5b506101f96103e93660046127d6565b61138f565b3480156103fa57600080fd5b5061041f604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101d09190612838565b34801561043857600080fd5b506102306104473660046124ed565b600060208181529281526040808220909352908152205481565b34801561046d57600080fd5b506101f961153e565b34801561048257600080fd5b5061023060045481565b34801561049857600080fd5b5061023060055481565b3480156104ae57600080fd5b506101f96104bd366004612520565b61156f565b6001546001600160a01b031633146104f55760405162461bcd60e51b81526004016104ec9061284b565b60405180910390fd5b600354156105535760405162461bcd60e51b815260206004820152602560248201527f426174636820696e2070726f67726573732c207375626d6974206f7220726f6c6044820152646c6261636b60d81b60648201526084016104ec565b6001600061056383850185612b60565b602081015151815151919250146105cc5760405162461bcd60e51b815260206004820152602760248201527f496e76616c6964206164647265737320616e64207472616465206c69737473206044820152666c656e6774687360c81b60648201526084016104ec565b60005b8160400151518163ffffffff16101561093357600082604001518263ffffffff168151811061060057610600612c6e565b6020026020010151606001519050600083604001518363ffffffff168151811061062c5761062c612c6e565b602002602001015160000151905060005b84604001518463ffffffff168151811061065957610659612c6e565b602002602001015160200151518163ffffffff1610156106dd5784604001518463ffffffff168151811061068f5761068f612c6e565b6020026020010151602001518163ffffffff16815181106106b2576106b2612c6e565b602002602001015160200151836106c99190612c84565b9250806106d581612cac565b91505061063d565b5060005b84604001518463ffffffff16815181106106fd576106fd612c6e565b602002602001015160400151518163ffffffff1610156108ca57600085604001518563ffffffff168151811061073557610735612c6e565b6020026020010151604001518263ffffffff168151811061075857610758612c6e565b602002602001015160200151905080846107729190612ccf565b9350600086604001518663ffffffff168151811061079257610792612c6e565b6020026020010151604001518363ffffffff16815181106107b5576107b5612c6e565b60200260200101516000015161ffff169050600087600001518263ffffffff16815181106107e5576107e5612c6e565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928a16825291909352909120549091508311156108b45760009850806001600160a01b03167fa6944c7e44656df0115b6c88671d15c19cb3248c813c5806eaf26312e85b5dc989602001518463ffffffff168151811061086b5761086b612c6e565b602090810291909101810151516001600160a01b0380861660009081528084526040808220928c16825291909352918290205491516108ab928891612d32565b60405180910390a25b50505080806108c290612cac565b9150506106e1565b50811561091e5783604001518363ffffffff16815181106108ed576108ed612c6e565b6020908102919091010151516040516337f855c760e01b81526001600160a01b0390911660048201526024016104ec565b5050808061092b90612cac565b9150506105cf565b50811561095757838360405161094a929190612d57565b6040519081900390206003555b50505050565b6001546001600160a01b031633146109875760405162461bcd60e51b81526004016104ec9061284b565b6003546000036109cd5760405162461bcd60e51b8152602060048201526011602482015270139bc818985d18da081c1c995c185c9959607a1b60448201526064016104ec565b81816040516109dd929190612d57565b604051809103902060035414610a405760405162461bcd60e51b815260206004820152602260248201527f4861736820646f6573206e6f74206d61746368207072657061726564206261746044820152610c6d60f31b60648201526084016104ec565b6000610a4e82840184612b60565b905060005b8160400151518163ffffffff161015610e4857600082604001518263ffffffff1681518110610a8457610a84612c6e565b602002602001015160000151905060005b83604001518363ffffffff1681518110610ab157610ab1612c6e565b602002602001015160200151518163ffffffff161015610bdf57600084604001518463ffffffff1681518110610ae957610ae9612c6e565b6020026020010151602001518263ffffffff1681518110610b0c57610b0c612c6e565b60200260200101516020015190506000856000015186604001518663ffffffff1681518110610b3d57610b3d612c6e565b6020026020010151602001518463ffffffff1681518110610b6057610b60612c6e565b60200260200101516000015161ffff1681518110610b8057610b80612c6e565b6020908102919091018101516001600160a01b03808216600090815280845260408082209289168252919093528220805491935084929091610bc3908490612423565b9250508190555050508080610bd790612cac565b915050610a95565b5060005b83604001518363ffffffff1681518110610bff57610bff612c6e565b602002602001015160400151518163ffffffff161015610d9c57600084604001518463ffffffff1681518110610c3757610c37612c6e565b6020026020010151604001518263ffffffff1681518110610c5a57610c5a612c6e565b60200260200101516020015190506000856000015186604001518663ffffffff1681518110610c8b57610c8b612c6e565b6020026020010151604001518463ffffffff1681518110610cae57610cae612c6e565b60200260200101516000015161ffff1681518110610cce57610cce612c6e565b6020908102919091018101516001600160a01b0380821660009081528084526040808220928916825291909352909120549091508211610d48576001600160a01b0380821660009081526020818152604080832093881683529290529081208054849290610d3d908490612d67565b90915550610d879050565b60405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742042616c616e636560601b60448201526064016104ec565b50508080610d9490612cac565b915050610be3565b5082604001518263ffffffff1681518110610db957610db9612c6e565b602002602001015160600151600014610e355782604001518263ffffffff1681518110610de857610de8612c6e565b602090810291909101810151606001516002546001600160a01b03908116600090815280845260408082209286168252919093528220805491929091610e2f908490612423565b90915550505b5080610e4081612cac565b915050610a53565b5060005b8160200151518163ffffffff161015610efa578151805163ffffffff8316908110610e7957610e79612c6e565b60200260200101516001600160a01b03167f8371f930fec32c9b3def9889038e3a93c3df73bc83aa9e6c01c806a70b2cce1783602001518363ffffffff1681518110610ec757610ec7612c6e565b602002602001015160000151604051610ee09190612d7a565b60405180910390a280610ef281612cac565b915050610e4c565b505060038054600455600090555050565b6000610f156115ad565b905090565b6040516323b872dd60e01b81523360048201523060248201526044810182905282906001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f939190612d8d565b50336000908152602081815260408083206001600160a01b038716845290915281208054849290610fc5908490612423565b9091555050604080516001600160a01b03851681526020810184905233917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a2505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b03166000811580156110585750825b90506000826001600160401b031660011480156110745750303b155b905081158015611082575080155b156110a05760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156110ca57845460ff60401b1916600160401b1785555b6110d3336115b7565b6110db6115c8565b6111286040518060400160405280600e81526020016d436861696e52696e67204c61627360901b81525060405180604001604052806005815260200164302e302e3160d81b8152506115d0565b600180546001600160a01b03808a166001600160a01b0319928316179092556002805492891692909116919091179055831561119e57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6111af6115e2565b6001600160a01b0381166111fb5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b60448201526064016104ec565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61122561163d565b61122e826116e2565b61123882826116ea565b5050565b60006112466117ac565b5060008051602061318b83398151915290565b6112616115e2565b6001600160a01b0381166112ad5760405162461bcd60e51b81526020600482015260136024820152724e6f7420612076616c6964206164647265737360681b60448201526064016104ec565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6112d76115e2565b6112e160006117f5565b565b6000606080828080838160008051602061316b833981519152805490915015801561131057506001810154155b6113545760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b60448201526064016104ec565b61135c611866565b611364611929565b60408051600080825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b6001546001600160a01b031633146113b95760405162461bcd60e51b81526004016104ec9061284b565b600354156114095760405162461bcd60e51b815260206004820152601b60248201527f536574746c656d656e7420626174636820696e2070726f63657373000000000060448201526064016104ec565b60005b8181101561152c57600083838381811061142857611428612c6e565b905060200281019061143a9190612daf565b600081811061144b5761144b612c6e565b919091013560f81c9050600181111561146657611466612dfc565b9050600084848481811061147c5761147c612c6e565b905060200281019061148e9190612daf565b61149c916001908290612e12565b8101906114a99190612e53565b90506114b58183611968565b156115225760018260018111156114ce576114ce612dfc565b036114fd57805160208083015180519181015160408201516080909201516114f894939290611ad8565b611522565b8051602080830151805191810151604082015160809092015161152294939290611b75565b505060010161140c565b506115378282611da0565b6005555050565b6001546001600160a01b031633146115685760405162461bcd60e51b81526004016104ec9061284b565b6000600355565b6115776115e2565b6001600160a01b0381166115a157604051631e4fbdf760e01b8152600060048201526024016104ec565b6115aa816117f5565b50565b6000610f15611e35565b6115bf611ea9565b6115aa81611ef2565b6112e1611ea9565b6115d8611ea9565b6112388282611efa565b336116147f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146112e15760405163118cdaa760e01b81523360048201526024016104ec565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806116c457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116b860008051602061318b833981519152546001600160a01b031690565b6001600160a01b031614155b156112e15760405163703e46dd60e11b815260040160405180910390fd5b6115aa6115e2565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611744575060408051601f3d908101601f1916820190925261174191810190612f2a565b60015b61176c57604051634c9c8ce360e01b81526001600160a01b03831660048201526024016104ec565b60008051602061318b833981519152811461179d57604051632a87526960e21b8152600481018290526024016104ec565b6117a78383611f5b565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112e15760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d102805460609160008051602061316b833981519152916118a590612f43565b80601f01602080910402602001604051908101604052809291908181526020018280546118d190612f43565b801561191e5780601f106118f35761010080835404028352916020019161191e565b820191906000526020600020905b81548152906001019060200180831161190157829003601f168201915b505050505091505090565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d103805460609160008051602061316b833981519152916118a590612f43565b600080611a2e60405180608001604052806042815260200161312960429139805160209182012086820151805192015190919060018760018111156119af576119af612dfc565b146119c2578760200151604001516119c5565b60005b6020808a015160600151604051611a139695949392019485526001600160a01b03938416602086015291909216604084015260608301919091526001600160401b0316608082015260a00190565b60405160208183030381529060405280519060200120611fb1565b90506000611a40828660400151611fde565b90508460200151600001516001600160a01b0316816001600160a01b031614611acb57602080860151805187519282015160409283015192516001600160a01b03909216937fa85a3ffa879b141fb40464894b63d202701aba54ee2801511bd508979157e5b293611ab8939192916000908190612f9f565b60405180910390a2600092505050611ad2565b6001925050505b92915050565b6001600160a01b0380851660009081526020818152604080832093871683529290522054808210611b5257846001600160a01b03167fa85a3ffa879b141fb40464894b63d202701aba54ee2801511bd508979157e5b2878686856001604051611b45959493929190612f9f565b60405180910390a2611b6d565b611b6d868686848711611b655786611b67565b845b86611b75565b505050505050565b6001600160a01b038085166000908152602081815260408083209387168352929052205480831115611be357846001600160a01b03167fa85a3ffa879b141fb40464894b63d202701aba54ee2801511bd508979157e5b2878686856001604051611b45959493929190612f9f565b6001600160a01b0380861660009081526020818152604080832093881683529290529081208054859290611c18908490612d67565b90915550506002546001600160a01b0390811660009081526020818152604080832093881683529290529081208054849290611c55908490612423565b90915550506001600160a01b038416611cad576001600160a01b0385166108fc611c7f8486612d67565b6040518115909202916000818181858888f19350505050158015611ca7573d6000803e3d6000fd5b50611d3a565b836001600160a01b03811663a9059cbb87611cc88688612d67565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d379190612d8d565b50505b604080516001600160401b03881681526001600160a01b03868116602083015291810185905260608101849052908616907fe800413c05f850178bea4488b9d87a728d51ad52113ac85005006eb65bf1e2339060800160405180910390a2505050505050565b6040805160008082526020820190925260005b83811015611e25576000858583818110611dcf57611dcf612c6e565b9050602002810190611de19190612daf565b604051611def929190612d57565b6040519081900381209150611e0a9084908390602001612fe3565b60408051601f19818403018152919052925050600101611db3565b5080516020909101209392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611e60612008565b611e68612072565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166112e157604051631afcd79f60e31b815260040160405180910390fd5b611577611ea9565b611f02611ea9565b60008051602061316b8339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d102611f3c848261304d565b5060038101611f4b838261304d565b5060008082556001909101555050565b611f64826120b6565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a2805115611fa9576117a7828261211b565b611238612191565b6000611ad2611fbe6115ad565b8360405161190160f01b8152600281019290925260228201526042902090565b600080600080611fee86866121b0565b925092509250611ffe82826121fd565b5090949350505050565b600060008051602061316b83398151915281612022611866565b80519091501561203a57805160209091012092915050565b81548015612049579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b600060008051602061316b8339815191528161208c611929565b8051909150156120a457805160209091012092915050565b60018201548015612049579392505050565b806001600160a01b03163b6000036120ec57604051634c9c8ce360e01b81526001600160a01b03821660048201526024016104ec565b60008051602061318b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060600080846001600160a01b031684604051612138919061310c565b600060405180830381855af49150503d8060008114612173576040519150601f19603f3d011682016040523d82523d6000602084013e612178565b606091505b50915091506121888583836122b6565b95945050505050565b34156112e15760405163b398979f60e01b815260040160405180910390fd5b600080600083516041036121ea5760208401516040850151606086015160001a6121dc88828585612315565b9550955095505050506121f6565b50508151600091506002905b9250925092565b600082600381111561221157612211612dfc565b0361221a575050565b600182600381111561222e5761222e612dfc565b0361224c5760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561226057612260612dfc565b036122815760405163fce698f760e01b8152600481018290526024016104ec565b600382600381111561229557612295612dfc565b03611238576040516335e2f38360e21b8152600481018290526024016104ec565b6060826122cb576122c6826123e4565b61230e565b81511580156122e257506001600160a01b0384163b155b1561230b57604051639996b31560e01b81526001600160a01b03851660048201526024016104ec565b50805b9392505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561235057506000915060039050826123da565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa1580156123a4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166123d0575060009250600191508290506123da565b9250600091508190505b9450945094915050565b8051156123f45780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115611ad257611ad261240d565b6000806020838503121561244957600080fd5b82356001600160401b038082111561246057600080fd5b818501915085601f83011261247457600080fd5b81358181111561248357600080fd5b86602082850101111561249557600080fd5b60209290920196919550909350505050565b80356001600160a01b03811681146124be57600080fd5b919050565b600080604083850312156124d657600080fd5b6124df836124a7565b946020939093013593505050565b6000806040838503121561250057600080fd5b612509836124a7565b9150612517602084016124a7565b90509250929050565b60006020828403121561253257600080fd5b61230e826124a7565b634e487b7160e01b600052604160045260246000fd5b604051602081016001600160401b03811182821017156125735761257361253b565b60405290565b604080519081016001600160401b03811182821017156125735761257361253b565b604051608081016001600160401b03811182821017156125735761257361253b565b604051606081016001600160401b03811182821017156125735761257361253b565b60405160a081016001600160401b03811182821017156125735761257361253b565b604051601f8201601f191681016001600160401b03811182821017156126295761262961253b565b604052919050565b600082601f83011261264257600080fd5b81356001600160401b0381111561265b5761265b61253b565b61266e601f8201601f1916602001612601565b81815284602083860101111561268357600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156126b357600080fd5b6126bc836124a7565b915060208301356001600160401b038111156126d757600080fd5b6126e385828601612631565b9150509250929050565b60005b838110156127085781810151838201526020016126f0565b50506000910152565b600081518084526127298160208601602086016126ed565b601f01601f19169290920160200192915050565b60ff60f81b881681526000602060e0602084015261275e60e084018a612711565b8381036040850152612770818a612711565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b818110156127c4578351835292840192918401916001016127a8565b50909c9b505050505050505050505050565b600080602083850312156127e957600080fd5b82356001600160401b038082111561280057600080fd5b818501915085601f83011261281457600080fd5b81358181111561282357600080fd5b8660208260051b850101111561249557600080fd5b60208152600061230e6020830184612711565b6020808252601b908201527f53656e646572206973206e6f7420746865207375626d69747465720000000000604082015260600190565b60006001600160401b0382111561289b5761289b61253b565b5060051b60200190565b600082601f8301126128b657600080fd5b813560206128cb6128c683612882565b612601565b828152600592831b85018201928282019190878511156128ea57600080fd5b8387015b858110156129ba5780356001600160401b038082111561290e5760008081fd5b90890190818b03601f19018713156129265760008081fd5b61292e612551565b87830135828111156129405760008081fd5b8084019350508b603f84011261295857600091508182fd5b878301359150604061296c6128c684612882565b83815292861b8401810192898101908e8511156129895760008081fd5b948201945b848610156129a75785358252948a0194908a019061298e565b83525050865250509284019284016128ee565b5090979650505050505050565b600082601f8301126129d857600080fd5b813560206129e86128c683612882565b82815260069290921b84018101918181019086841115612a0757600080fd5b8286015b84811015612a575760408189031215612a245760008081fd5b612a2c612579565b813561ffff81168114612a3f5760008081fd5b81528185013585820152835291830191604001612a0b565b509695505050505050565b600082601f830112612a7357600080fd5b81356020612a836128c683612882565b82815260059290921b84018101918181019086841115612aa257600080fd5b8286015b84811015612a575780356001600160401b0380821115612ac65760008081fd5b908801906080828b03601f1901811315612ae05760008081fd5b612ae861259b565b612af38885016124a7565b815260408085013584811115612b095760008081fd5b612b178e8b838901016129c7565b8a8401525060608086013585811115612b305760008081fd5b612b3e8f8c838a01016129c7565b9284019290925294909201359381019390935250508352918301918301612aa6565b60006020808385031215612b7357600080fd5b82356001600160401b0380821115612b8a57600080fd5b9084019060608287031215612b9e57600080fd5b612ba66125bd565b823582811115612bb557600080fd5b8301601f81018813612bc657600080fd5b8035612bd46128c682612882565b81815260059190911b8201860190868101908a831115612bf357600080fd5b928701925b82841015612c1857612c09846124a7565b82529287019290870190612bf8565b84525050508284013582811115612c2e57600080fd5b612c3a888286016128a5565b85830152506040830135935081841115612c5357600080fd5b612c5f87858501612a62565b60408201529695505050505050565b634e487b7160e01b600052603260045260246000fd5b8082018281126000831280158216821582161715612ca457612ca461240d565b505092915050565b600063ffffffff808316818103612cc557612cc561240d565b6001019392505050565b8181036000831280158383131683831282161715612cef57612cef61240d565b5092915050565b60008151808452602080850194506020840160005b83811015612d2757815187529582019590820190600101612d0b565b509495945050505050565b606081526000612d456060830186612cf6565b60208301949094525060400152919050565b8183823760009101908152919050565b81810381811115611ad257611ad261240d565b60208152600061230e6020830184612cf6565b600060208284031215612d9f57600080fd5b8151801515811461230e57600080fd5b6000808335601e19843603018112612dc657600080fd5b8301803591506001600160401b03821115612de057600080fd5b602001915036819003821315612df557600080fd5b9250929050565b634e487b7160e01b600052602160045260246000fd5b60008085851115612e2257600080fd5b83861115612e2f57600080fd5b5050820193919092039150565b80356001600160401b03811681146124be57600080fd5b600060208284031215612e6557600080fd5b81356001600160401b0380821115612e7c57600080fd5b9083019081850360e0811215612e9157600080fd5b612e996125bd565b612ea284612e3c565b815260a0601f1983011215612eb657600080fd5b612ebe6125df565b9150612ecc602085016124a7565b8252612eda604085016124a7565b602083015260608401356040830152612ef560808501612e3c565b606083015260a0840135608083015281602082015260c0840135915082821115612f1e57600080fd5b612c5f87838601612631565b600060208284031215612f3c57600080fd5b5051919050565b600181811c90821680612f5757607f821691505b602082108103612f7757634e487b7160e01b600052602260045260246000fd5b50919050565b60028110612f9b57634e487b7160e01b600052602160045260246000fd5b9052565b6001600160401b03861681526001600160a01b0385166020820152604081018490526060810183905260a08101612fd96080830184612f7d565b9695505050505050565b60008351612ff58184602088016126ed565b9190910191825250602001919050565b601f8211156117a7576000816000526020600020601f850160051c8101602086101561302e5750805b601f850160051c820191505b81811015611b6d5782815560010161303a565b81516001600160401b038111156130665761306661253b565b61307a816130748454612f43565b84613005565b602080601f8311600181146130af57600084156130975750858301515b600019600386901b1c1916600185901b178555611b6d565b600085815260208120601f198616915b828110156130de578886015182559484019460019091019084016130bf565b50858210156130fc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825161311e8184602087016126ed565b919091019291505056fe576974686472617728616464726573732073656e6465722c6164647265737320746f6b656e2c75696e7432353620616d6f756e742c75696e743634206e6f6e636529a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220b52581dd33e3308d145900dda1534325604c40d0944e215ecc79c76ceccfcad864736f6c63430008180033";

    public static final String FUNC_DOMAIN_SEPARATOR = "DOMAIN_SEPARATOR";

    public static final String FUNC_UPGRADE_INTERFACE_VERSION = "UPGRADE_INTERFACE_VERSION";

    public static final String FUNC_BALANCES = "balances";

    public static final String FUNC_BATCHHASH = "batchHash";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FEEACCOUNT = "feeAccount";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_LASTSETTLEMENTBATCHHASH = "lastSettlementBatchHash";

    public static final String FUNC_LASTWITHDRAWALBATCHHASH = "lastWithdrawalBatchHash";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PREPARESETTLEMENTBATCH = "prepareSettlementBatch";

    public static final String FUNC_PROXIABLEUUID = "proxiableUUID";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROLLBACKBATCH = "rollbackBatch";

    public static final String FUNC_SETFEEACCOUNT = "setFeeAccount";

    public static final String FUNC_SETSUBMITTER = "setSubmitter";

    public static final String FUNC_SUBMITSETTLEMENTBATCH = "submitSettlementBatch";

    public static final String FUNC_SUBMITWITHDRAWALS = "submitWithdrawals";

    public static final String FUNC_SUBMITTER = "submitter";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPGRADETOANDCALL = "upgradeToAndCall";

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event INITIALIZED_EVENT = new Event("Initialized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETTLEMENTCOMPLETED_EVENT = new Event("SettlementCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Bytes32>>() {}));
    ;

    public static final Event SETTLEMENTFAILED_EVENT = new Event("SettlementFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPGRADED_EVENT = new Event("Upgraded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event WITHDRAWAL_EVENT = new Event("Withdrawal", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWALFAILED_EVENT = new Event("WithdrawalFailed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
    ;

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_SEPARATOR() {
        final Function function = new Function(FUNC_DOMAIN_SEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> UPGRADE_INTERFACE_VERSION() {
        final Function function = new Function(FUNC_UPGRADE_INTERFACE_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balances(String param0, String param1) {
        final Function function = new Function(FUNC_BALANCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> batchHash() {
        final Function function = new Function(FUNC_BATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(String _token, BigInteger _amount) {
        final Function function = new Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain() {
        final Function function = new Function(FUNC_EIP712DOMAIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(function,
                new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (byte[]) results.get(5).getValue(), 
                                convertToNative((List<Uint256>) results.get(6).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<String> feeAccount() {
        final Function function = new Function(FUNC_FEEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getVersion() {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String _submitter, String _feeAccount) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter), 
                new org.web3j.abi.datatypes.Address(160, _feeAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> lastSettlementBatchHash() {
        final Function function = new Function(FUNC_LASTSETTLEMENTBATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> lastWithdrawalBatchHash() {
        final Function function = new Function(FUNC_LASTWITHDRAWALBATCHHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_PREPARESETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> proxiableUUID() {
        final Function function = new Function(FUNC_PROXIABLEUUID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> rollbackBatch() {
        final Function function = new Function(
                FUNC_ROLLBACKBATCH, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeAccount(String _feeAccount) {
        final Function function = new Function(
                FUNC_SETFEEACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _feeAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSubmitter(String _submitter) {
        final Function function = new Function(
                FUNC_SETSUBMITTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _submitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitSettlementBatch(byte[] data) {
        final Function function = new Function(
                FUNC_SUBMITSETTLEMENTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitWithdrawals(List<byte[]> withdrawals) {
        final Function function = new Function(
                FUNC_SUBMITWITHDRAWALS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(withdrawals, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> submitter() {
        final Function function = new Function(FUNC_SUBMITTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeToAndCall(String newImplementation, byte[] data, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_UPGRADETOANDCALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newImplementation), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public static List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DepositEventResponse getDepositEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DEPOSIT_EVENT, log);
        DepositEventResponse typedResponse = new DepositEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDepositEventFromLog(log));
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<InitializedEventResponse> getInitializedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(INITIALIZED_EVENT, transactionReceipt);
        ArrayList<InitializedEventResponse> responses = new ArrayList<InitializedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InitializedEventResponse typedResponse = new InitializedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static InitializedEventResponse getInitializedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(INITIALIZED_EVENT, log);
        InitializedEventResponse typedResponse = new InitializedEventResponse();
        typedResponse.log = log;
        typedResponse.version = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getInitializedEventFromLog(log));
    }

    public Flowable<InitializedEventResponse> initializedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INITIALIZED_EVENT));
        return initializedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<SettlementCompletedEventResponse> getSettlementCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, transactionReceipt);
        ArrayList<SettlementCompletedEventResponse> responses = new ArrayList<SettlementCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementCompletedEventResponse getSettlementCompletedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTCOMPLETED_EVENT, log);
        SettlementCompletedEventResponse typedResponse = new SettlementCompletedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementCompletedEventFromLog(log));
    }

    public Flowable<SettlementCompletedEventResponse> settlementCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTCOMPLETED_EVENT));
        return settlementCompletedEventFlowable(filter);
    }

    public static List<SettlementFailedEventResponse> getSettlementFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, transactionReceipt);
        ArrayList<SettlementFailedEventResponse> responses = new ArrayList<SettlementFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.requestedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SettlementFailedEventResponse getSettlementFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SETTLEMENTFAILED_EVENT, log);
        SettlementFailedEventResponse typedResponse = new SettlementFailedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.tradeHashes = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.requestedAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSettlementFailedEventFromLog(log));
    }

    public Flowable<SettlementFailedEventResponse> settlementFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEMENTFAILED_EVENT));
        return settlementFailedEventFlowable(filter);
    }

    public static List<UpgradedEventResponse> getUpgradedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UPGRADED_EVENT, transactionReceipt);
        ArrayList<UpgradedEventResponse> responses = new ArrayList<UpgradedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpgradedEventResponse typedResponse = new UpgradedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UpgradedEventResponse getUpgradedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UPGRADED_EVENT, log);
        UpgradedEventResponse typedResponse = new UpgradedEventResponse();
        typedResponse.log = log;
        typedResponse.implementation = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUpgradedEventFromLog(log));
    }

    public Flowable<UpgradedEventResponse> upgradedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPGRADED_EVENT));
        return upgradedEventFlowable(filter);
    }

    public static List<WithdrawalEventResponse> getWithdrawalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, transactionReceipt);
        ArrayList<WithdrawalEventResponse> responses = new ArrayList<WithdrawalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalEventResponse getWithdrawalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWAL_EVENT, log);
        WithdrawalEventResponse typedResponse = new WithdrawalEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalEventFromLog(log));
    }

    public Flowable<WithdrawalEventResponse> withdrawalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWAL_EVENT));
        return withdrawalEventFlowable(filter);
    }

    public static List<WithdrawalFailedEventResponse> getWithdrawalFailedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(WITHDRAWALFAILED_EVENT, transactionReceipt);
        ArrayList<WithdrawalFailedEventResponse> responses = new ArrayList<WithdrawalFailedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawalFailedEventResponse typedResponse = new WithdrawalFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static WithdrawalFailedEventResponse getWithdrawalFailedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(WITHDRAWALFAILED_EVENT, log);
        WithdrawalFailedEventResponse typedResponse = new WithdrawalFailedEventResponse();
        typedResponse.log = log;
        typedResponse._address = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sequence = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.token = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.errorCode = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<WithdrawalFailedEventResponse> withdrawalFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getWithdrawalFailedEventFromLog(log));
    }

    public Flowable<WithdrawalFailedEventResponse> withdrawalFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWALFAILED_EVENT));
        return withdrawalFailedEventFlowable(filter);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String from;

        public String token;

        public BigInteger amount;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {
    }

    public static class InitializedEventResponse extends BaseEventResponse {
        public BigInteger version;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SettlementCompletedEventResponse extends BaseEventResponse {
        public String _address;

        public List<byte[]> tradeHashes;
    }

    public static class SettlementFailedEventResponse extends BaseEventResponse {
        public String _address;

        public List<byte[]> tradeHashes;

        public BigInteger requestedAmount;

        public BigInteger balance;
    }

    public static class UpgradedEventResponse extends BaseEventResponse {
        public String implementation;
    }

    public static class WithdrawalEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger sequence;

        public String token;

        public BigInteger amount;

        public BigInteger fee;
    }

    public static class WithdrawalFailedEventResponse extends BaseEventResponse {
        public String _address;

        public BigInteger sequence;

        public String token;

        public BigInteger amount;

        public BigInteger balance;

        public BigInteger errorCode;
    }
}
