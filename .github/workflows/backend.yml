# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Gradle Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      # needed for aws credentials
      id-token: write
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build
    - name: Configure SSH Agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.CI_BASTION_KEY }}
    - name: Test DB access
      run: |
        ssh -L 5434:db-cluster.cluster-cpwwaa4iqa1s.-east-2.rds.amazonaws.com:5432 ec2-user@test-bastion.chainring.co -N &
        PGPASSWORD=$(aws --region us-east-2 secretsmanager get-secret-value --secret-id 'arn:aws:secretsmanager:us-east-2:851725450525:secret:rds!cluster-32e6d3b7-0fd7-43f6-b108-4648afcf69c1-NgwNkC' | jq '.SecretString' | awk -F\\ '{print $8}' | sed 's/^"//')
        psql --port=5434 --host=localhost --user=chainring -c "SELECT 1"
    - name: Check with Gradle Wrapper
      run: ./gradlew check
    - name: Install aws-cli
      uses: unfor19/install-aws-cli-action@v1
      if: ${{ github.event_name == 'push' }}
      with:
        arch: amd64
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2
      if: ${{ github.event_name == 'push' }}
      with:
        aws-region: us-east-2
        role-to-assume: arn:aws:iam::851725450525:role/terraform-20240313150351606400000001
    - name: Login to Amazon ECR
      if: ${{ github.event_name == 'push' }}
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Publish to ECR
      if: ${{ github.event_name == 'push' }}
      run: BUILD_NUMBER=$GITHUB_RUN_NUMBER make publish_containers

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
